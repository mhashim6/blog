<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>The Upside-Down Trees</title><link>https://blog.mhashim6.me/</link><description>Recent content on The Upside-Down Trees</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sat, 30 Apr 2022 11:11:11 +0100</lastBuildDate><atom:link href="https://blog.mhashim6.me/index.xml" rel="self" type="application/rss+xml"/><item><title>FP and OOP are close siblings</title><link>https://blog.mhashim6.me/fp-and-oop-are-close-siblings/</link><pubDate>Sat, 18 Mar 2023 00:00:00 +0000</pubDate><guid>https://blog.mhashim6.me/fp-and-oop-are-close-siblings/</guid><description>&lt;iframe style="margin: auto;" width="100%" height="315px"
src="https://www.youtube.com/embed/m31rxlE4CfQ?autoplay=1">
&lt;/iframe>
&lt;p>The goal of this post is not to say that you can use both FP and OOP in harmony. Nor do I want to repeat the fact that a paradigm war is idiotic.&lt;/p>
&lt;p>I&amp;rsquo;m here to tell you that FP and OOP are quite close and you can truly understand both if you got to learn a few things about the reasoning behind certain patterns in both worlds.&lt;/p>
&lt;p>With this knowledge you can definitely combine the best of both worlds and appreciate the beauty of each &amp;ldquo;solution&amp;rdquo;.&lt;/p>
&lt;p>Yes, OOP and FP are both solutions to the same problem—How to better represent and solve complex problems in the Human world. And my main dish here will be: &lt;code>Function Currying&lt;/code>.&lt;/p>
&lt;p>You can think of this as an&lt;strong>⁽*⁾&lt;/strong> &lt;em>&amp;ldquo;FP for OOP developers&amp;rdquo;&lt;/em> kind of post.&lt;/p>
&lt;h2 id="you-dont-think-you-know-it-but-you-actually-use-it-everyday">You don&amp;rsquo;t think you know it, but you actually use it everyday&lt;/h2>
&lt;details>
&lt;summary>If you've never heard of Currying, expand to see a quick intro&lt;/summary>
&lt;p>A Curried function is basically a function that doesn&amp;rsquo;t accept multiple parameters. Instead, each function takes a single parameter, if you need another, your function must return another &amp;ldquo;inner&amp;rdquo; function that accepts the second parameter and so on.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Typical function
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">sum&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">n1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">n2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">n3&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">n1&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">n2&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">n3&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">sum&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 6
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Curried function
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">sum&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">n1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">n2&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">n3&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">n1&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">n2&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">n3&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">sum&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 6
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This doesn&amp;rsquo;t look pretty, especially because js doesn&amp;rsquo;t have syntactic sugar for currying. And I know it seems pretty stupid. But it&amp;rsquo;s actually brilliant and you&amp;rsquo;ve used this same pattern in OOP, just with different semantics.&lt;/p>
&lt;/details>
&lt;p>What can you achieve with currying? To answer this we&amp;rsquo;ll have to talk about OOP &lt;em>(bear with me)&lt;/em>. Before OOP, data was put in dummy bags. call it &lt;code>structs&lt;/code>, &lt;code>JSON Objects&lt;/code> or whatever, it&amp;rsquo;s essentially a bag. In complex apps &lt;em>(just like with life)&lt;/em> abstraction hides away lots of complexity and makes us pay attention to the problem at hand.&lt;/p>
&lt;p>To operate on such bags, we write functions that use values from this bag to produce another bag or a primitive value&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">user&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">username&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;mhashim6&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">firstName&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;Muhammad&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">lastName&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;Hashim&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">email&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;msg at mhashim6.me&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">fullName&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">user&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="sb">`&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">user&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">firstName&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb"> &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">user&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">lastName&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">`&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Imagine having only these 2 language features to create your complex representations. How cumbersome and redundant would it be to &lt;u>instantiate&lt;/u> multiple users and operate on them without &lt;strong>having globals everywhere&lt;/strong> and worrying about which instance still lives and which is no longer needed.&lt;/p>
&lt;p>Wouldn&amp;rsquo;t it be much more intuitive to make these data bags &lt;strong>contextual&lt;/strong> with their corresponding functionality implicitly tied to the context or the state of the data? This is partially why OOP was designed—to make objects contextual &amp;amp; less dumb. To abstract away most of the data bag content and have contextual actions (methods) instead, much like our real-world objects.&lt;/p>
&lt;h2 id="enter-oop">Enter OOP&lt;/h2>
&lt;p>With OOP, you could combine data and functionality in an abstraction called &lt;code>Object&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">class&lt;/span> &lt;span class="nx">User&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">constructor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">username&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">firstName&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">lastName&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">email&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">username&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">username&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">firstName&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">firstName&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">lastName&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">lastName&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">email&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">email&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">fullName&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="s2">&amp;#34;${this.firstName} ${this.lastName}&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Notice here, &lt;code>fullName&lt;/code> no longer receives a parameter; it&amp;rsquo;s bound to a context (constructor parameters that are stored as fields). And each instance of the &lt;code>User&lt;/code> Object has its own context and set of data fields.&lt;/p>
&lt;p>This basic grouping was the first step towards an abstraction that can mimic most complex objects and behaviours without duplicating much of the code or having to carry the context (data fields) with you in every procedure call.&lt;/p>
&lt;h2 id="what-does-this-have-to-do-with-fp-or-currying">What does this have to do with FP or Currying?&lt;/h2>
&lt;p>Everything! Currying is a way to define a long-term context in a function to be implicitly used in other closely-related functions.&lt;/p>
&lt;p>Let&amp;rsquo;s make up a problem and solve it to further demonstrate this&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">class&lt;/span> &lt;span class="nx">NumberScaler&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">constructor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">value&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">field&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">value&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">scaledBy&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">factor&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">field&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="nx">factor&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">five&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">NumberScaler&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">fiveScaledBy2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">five&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">scaledBy&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 10
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">fiveScaledBy14&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">five&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">scaledBy&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">14&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 70
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Here we created a &lt;code>NumberScaler&lt;/code> Object with a value of &lt;code>5&lt;/code>. We can now use this object &lt;u>lazily&lt;/u> to make more operations on the initial value(s) we passed and thus augmenting the power of the data in the object.&lt;/p>
&lt;p>Now imagine we want to do the same with just functions&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">numberScaler&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">value&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">factor&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">value&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="nx">factor&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">fiveScaledBy2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">numberScaler&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 10
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">fiveScaledBy14&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">numberScaler&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">14&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 70
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>It&amp;rsquo;s the same output but notice that we have to &lt;u>eagerly&lt;/u> provide our context to the function every time we want to scale the number &lt;code>5&lt;/code>. If this was a more complex example with many parameters to carry around it&amp;rsquo;d be hellish to pass them all every time, or to create adhoc bags to hold the parameters to operate on them.&lt;/p>
&lt;p>In fact, the accurate OOP equivalent to what we did is&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">class&lt;/span> &lt;span class="nx">NumberScaler&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">constructor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">value&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">factor&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">field&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">value&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">factor&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">factor&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">scaled&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">field&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">factor&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">fiveScaledBy2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">NumberScaler&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">scaled&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">// 10
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">fiveScaledBy14&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">NumberScaler&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">14&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">scaled&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">// 70
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Can you spot the difference &lt;em>(and the problem)&lt;/em>? We can no longer reuse parts of the logic in our object once we created it. We have to create a new one every time we want to scale a number. Which is not &amp;ldquo;wrong&amp;rdquo; in a general sense, but it&amp;rsquo;s limiting and will prevent us from doing many things with our object. It&amp;rsquo;s slightly less dumb than the original data bag!&lt;/p>
&lt;p>Back to FP, how do we implement an implicit context in our function? We can make use of &lt;code>closures&lt;/code> to hold our values for us!&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">numberScaler&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">value&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">factor&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">value&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="nx">factor&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">fiveScaler&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">numberScaler&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// returns a new function that accepts a factor parameter to multiply it by 5
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">fiveScaledBy2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">fiveScaler&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 10
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">fiveScaledBy14&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">fiveScaler&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">14&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 70
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Did you see that? It&amp;rsquo;s as if we created a &amp;ldquo;constructor&amp;rdquo; with initial values and then used them later! This is exactly what we did. We partially applied the function &lt;code>numberScaler&lt;/code> with just one parameter, as if it was a factory of another function that takes whatever &lt;code>factor&lt;/code> we provide to scale the number &lt;code>5&lt;/code>. This is called &lt;em>(drumroll…)&lt;/em> &amp;ldquo;&lt;strong>Partial Application&lt;/strong>&amp;rdquo; of Curried Functions.&lt;/p>
&lt;h2 id="byproducts">Byproducts&lt;/h2>
&lt;p>Without much change, we can use both models to do really useful and reusable stuff&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// OOP
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">doubler&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">NumberScaler&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">doubler&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">scaledBy&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 10
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">doubler&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">scaledBy&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">6&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 12
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">doubler&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">scaledBy&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">7&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 14
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// FP
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">doubler&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">numberScaler&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">doubler&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">//10
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">doubler&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">6&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">//12
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">doubler&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">7&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">//14
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Our data bag has become much more versatile and it can do much on its own without writing any custom code. Most importantly, we achieved this both with OOP and FP! Though It&amp;rsquo;s much simpler and way more elegant in FP if I say so myself.&lt;/p>
&lt;h2 id="retrospection">Retrospection&lt;/h2>
&lt;p>In both OOP and FP we solved a problem almost the same way using different types of implicit contexts. In OOP we used object fields. In FP we used Function Currying. Not only this allows us to lazily execute our code, it allows us to remove unneeded redundancy as well.&lt;/p>
&lt;p>We didn&amp;rsquo;t need to have global data bags. We didn&amp;rsquo;t have to repeat ourselves when executing a procedure. We don&amp;rsquo;t have to worry about destroying the context when we are done with the object instance or the function reference. We only have to care about the abstract representation of our logic.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>⁽*⁾&lt;/strong> if you read &amp;ldquo;FP&amp;rdquo; like &amp;ldquo;Ef Pe&amp;rdquo; then it&amp;rsquo;s &amp;ldquo;an&amp;rdquo;. If you read it like &amp;ldquo;Functional Programming&amp;rdquo; then it&amp;rsquo;s &amp;ldquo;a&amp;rdquo;.&lt;/p></description></item><item><title>What Reverse Engineering Foretells</title><link>https://blog.mhashim6.me/what-reverse-engineering-foretells/</link><pubDate>Sat, 11 Mar 2023 00:00:00 +0000</pubDate><guid>https://blog.mhashim6.me/what-reverse-engineering-foretells/</guid><description>&lt;h1 id="what-reverse-engineering-foretells">What Reverse Engineering Foretells&lt;/h1>
&lt;p>Many times I&amp;rsquo;ve found myself decompiling projects and apps, often for studying and tinkering purposes, out of curiosity or for work. Over the span of 10 years, apps have drastically changed; one could see how much the industry evolved and practices changed by gutting through the internals.&lt;/p>
&lt;p>Goes without saying, this is a weird way to contemplate the industry, and many insights can be easily obtained and analysed in more direct ways. However, it’s always fascinating to look &lt;em>(at anything)&lt;/em> through the microscope.&lt;/p>
&lt;h2 id="how-it-began">How it began&lt;/h2>
&lt;p>In 2012 I was a zealous &lt;em>&amp;ldquo;tweaker&amp;rdquo;&lt;/em>, not in the narcotic sense of course, but in Software. Owning an Android phone with a sense of control over everything like in a linux box. In the golden age of rooting and flashing the living bits out of a device.&lt;/p>
&lt;p>I’ve always enjoyed customising my devices and making everything to my liking. Open as it is, you can’t go further with Android without getting your hands dirty. You have to modify system apps and processes. And without much knowledge of a particular app codebase, I’d find myself reading through obfuscated &lt;code>assembly&lt;/code>/ &lt;code>smali&lt;/code> to make sense of things.&lt;/p>
&lt;p>Getting used to particular app architectures and conventions, things tend to get easier to identify and amend. App protection techniques slowly become simple patterns and routines. App layers and 3rd party packages are almost the same at a high level. And you can know your way without much zooming in.&lt;/p>
&lt;h2 id="from-binary-to-css">From binary to CSS&lt;/h2>
&lt;p>Apps in the past would heavily rely on native c(++) code to share and reuse logic. The Android framework wasn’t as mature as today &lt;em>(I know, it’s never matured)&lt;/em>. And performance was a key differentiator; a tiny memory boost resulted a thousand users more. Saving a 0.5 MB of app size would yield better listing and visibility on the App Store.&lt;/p>
&lt;p>Java was a shell and almost everything else would be a shared compiled lib. The parts you could tweak were almost exclusive to the Android framework APIs.&lt;/p>
&lt;p>Luckily, the OS became &lt;em>(slightly)&lt;/em> better, and hardware is almost miraculous now. Everything is more powerful and smaller. And the community became more fluent &lt;em>(more adapted TBH)&lt;/em> in the Android Framework. Many pieces of android logic have been written in libraries and being depended upon in almost every app.&lt;/p>
&lt;h3 id="native-era">Native Era&lt;/h3>
&lt;p>Many projects understood the value of native development and were willing to work on 2 codebases for Android and iOS as need be. But cost and maintainability were ever so problematic. Some teams would find a huge gap between both platforms. The Facebook app still suffers from this till this very day.&lt;/p>
&lt;p>Apps were never easier to analyse and reason about. I could introduce vast changes to almost any obfuscated app and make whatever I want. And I could imagine how this translates to great readability and maintainability across engineers and teams working on this app. Products can grow at a speed never seen before—Even reverse engineers benefitted from the readability and maturity of the Framework.&lt;/p>
&lt;h3 id="cross-platform">Cross Platform&lt;/h3>
&lt;p>Like sharing static libs, teams always strived to reuse logic across platforms. Many ways and frameworks were created to solve the same issue. It became the name of the game. Apps were no longer pure encoded sources, they became this jungle of bundles and autogenerated fillings that glue things together.&lt;/p>
&lt;p>Not because it made reverse engineering harder, but it seemed that things took a very complex turn to manage simplicity. Apps were no longer a function of product needs. The framework became a factor in the formula itself. Teams are developing for the framework, and slightly for the product.&lt;/p>
&lt;h3 id="the-underdog">The underdog&lt;/h3>
&lt;p>Other technologies faced drastic changes as well. The glorious web seemed like we never knew its true potential. And it is ever better in creating UIs. And the community has always wanted to make everything a website. The web &lt;em>(not to mention machine learning)&lt;/em> benefited the most from hardware advancements.&lt;/p>
&lt;p>Not only did they prove to be significantly more cost effective, &lt;code>webviews&lt;/code> in apps also matured and these days almost all apps rely on them. And &lt;strong>&amp;ldquo;native-shell-web-core&amp;rdquo;&lt;/strong> apps are now quite popular. In giant corporate apps, it’s almost impossible to dissect an app without finding yourself staring at a web-based feature/slice.&lt;/p>
&lt;h2 id="commentary">Commentary&lt;/h2>
&lt;p>&lt;em>“Web is the future!”&lt;/em> is as true as it’s annoying. Their are all types of tools and solutions to solve app problems (Reusability, Simplicity, and Appeal).&lt;/p>
&lt;p>But it seems if you’re looking for a compromise, the web is actually quite good. And if you want to invest more into your product, don’t sway away from native; odds are you’ll need it.&lt;/p>
&lt;p>And finally, spanning 10 years, I found no great app was created with an “android/ iOS framework dev” mindset. It’s always the Software Engineering mindset that shapes apps with respect to the opinionated framework, not the opposite.&lt;/p>
&lt;p>Have something to say? Use the comments below : )&lt;/p></description></item><item><title>في بيت الله الحرام</title><link>https://blog.mhashim6.me/umrah/</link><pubDate>Tue, 31 Jan 2023 00:00:00 +0000</pubDate><guid>https://blog.mhashim6.me/umrah/</guid><description>&lt;p>بسم الله الرحمن الرحيم &lt;br>
الحمد لله وحده. والصلاة والسلام على من لا نبي بعده&lt;/p>
&lt;p>قد فتح الله علي أربعًا إذ عكفت في بيته الحرام . &lt;strong>أولهم&lt;/strong> أن رزقني الله ابتداءً زيارة بيته والطواف به. &lt;strong>وثانيهم&lt;/strong> أن أتممت كتاب “قصة الإيمان”، وفيه من الهدى بإذن الله الكثير.&lt;/p>
&lt;p>&lt;strong>والثالث&lt;/strong> أن كان بي من وعثاء السفر ما بي، إذ ابتلاني الله بمرض شديد، رأيت فيه الشيطان جاهدًا بفتنتي في ماء زمزم. وقد أوقع بي بحديث &lt;strong>&lt;em>“شفاء سقم”&lt;/em>&lt;/strong>. وقد وجدت جمعًا من بلاد الهند يتجادلون في زمزم يقنعون أخًا لهم أنه لا شفاء به إلا إذا كنتَ من المؤمنين حقًا. وقد تأذى الرجل كثيرًا لقولهم وغار جرحي.&lt;/p>
&lt;p>فإذ بي أدعو الله أن يهديني اليه بإذنه ويرد عني شكي وحيرتي. وما بي إلا وكُشِف لي أنه لا شفاء إلا بإذن الله، وليس كل شفاءٍ بشفاء. فوالله لقد كان اخوة الهند على جزء من الحق وليس الحق كله؛ فالماء والله لا يختلف عن أي ماء عذب ألا أن طهره الله وبارك فيه، فإن اختلف تركيبه ما استسغناه وما طعمناه، وما طاقته أجسادنا، وما استطعنا حفظه وخزنه ونقله.&lt;/p>
&lt;p>وإنما جعل الله فيه الشفاء بإذنه وعلمه. واختصه بذلك، إن شاء شفى به وان شاء أرجأ. أما والله إنه قد شفاني من شكي وسقمي، فللّه الحمد والمنة.&lt;/p>
&lt;p>&lt;strong>والرابع&lt;/strong> كان أن تغيظ الشيطان مني فسلك لي مسلكًا غير سابقه. فإذ بي اردّد &lt;strong>&lt;em>“ما ننسخ من آية أو ننسها نأت بخير منها او مثلها”&lt;/em>&lt;/strong> وما كنت اقرأها. فأخذت اطالع آيات النسخ وأحكامه وما ورد فيه من الحديث وأعجب ماذا أراد الله بهذا وقد فُتِن به الكثيرون.&lt;/p>
&lt;p>ولكني هُديت أني والله قد أُغشيت عن بقية الآية &lt;strong>&lt;em>“ألم تعلم أن الله على كل شيء قدير”&lt;/em>&lt;/strong>. وكأن الله يمتحن يقين الناس يسألهم ألم تعلموا من الآيات ما يكفيكم للإيمان؟ أيكون بعد ذلك ريبٌ إذ نُسخت آية لحكمة لا يعلمها إلا الله؟&lt;/p>
&lt;p>&lt;strong>&lt;em>“أحسب الناس أن يتركوا أن يقولوا آمنا وهم لا يُفتنون”&lt;/em>&lt;/strong>.&lt;/p>
&lt;p>&lt;strong>&lt;em>“ألم تعلم أن الله على كل شيء قدير”&lt;/em>&lt;/strong> بلى يارب.&lt;/p></description></item><item><title>React Props Injection - Self-Review #2</title><link>https://blog.mhashim6.me/react-prop-injection-code-review/</link><pubDate>Fri, 06 Jan 2023 00:00:00 +0000</pubDate><guid>https://blog.mhashim6.me/react-prop-injection-code-review/</guid><description>&lt;blockquote>
&lt;p>This is the second post in an &lt;a href="https://blog.mhashim6.me/categories/self-review-series/">ongoing series&lt;/a> of Self-Code-Review. Where I pick &lt;em>subjectively&lt;/em> unique and interesting modules, in different projects, architectures, and languages.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>It’s not always the code that matters, it’s the critiques and observations that we will learn most from.&lt;/p>
&lt;/blockquote>
&lt;details>
&lt;summary>Note for ReactNative devs&lt;/summary>
&lt;p>
I know you guys have a nice imagination, otherwise you'd not have picked &lt;code>jsx&lt;/code> to stare at most of your life. So I need you to just imagine that every &lt;code>&amp;lt;div&amp;gt;&lt;/code> is just a &lt;code>&amp;lt;View&amp;gt;&lt;/code> and go along with this. Nothing here is specific to &lt;code>reactjs&lt;/code>. It's just React.
&lt;/p>
&lt;/details>
&lt;h2 id="the-props-distribution-issue">The Props distribution issue&lt;/h2>
&lt;p>You&amp;rsquo;re a good React dev, you want to reuse as much of your components while still maintaining standardised layouts and characteristics.&lt;/p>
&lt;p>So you have multiple Pages/Screens in your app. They&amp;rsquo;re mostly similar in layout but can still be a bit different to suit their needs. And that&amp;rsquo;s the mark of the good designer on your team.&lt;/p>
&lt;p>There&amp;rsquo;re many ways to make individual screens maintain the overall app style while being unique. For instance, there could be some common components like a header or a footer; some common styling like a colour accent per screen that matches the overall colour platte of the app.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-jsx" data-lang="jsx">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">Screen&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">({&lt;/span>&lt;span class="nx">themeColor&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">children&lt;/span>&lt;span class="p">})&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">Header&lt;/span> &lt;span class="na">themeColor&lt;/span>&lt;span class="p">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{...&lt;/span>&lt;span class="nx">children&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">Footer&lt;/span> &lt;span class="na">themeColor&lt;/span>&lt;span class="p">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>But this screen should be composed of multiple types of components that have their own responsibilities. Not only that, these components are reused in other screens/ parts of the app.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-jsx" data-lang="jsx">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">Landing&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">Screen&lt;/span> &lt;span class="na">themeColor&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;#EDE3D9&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">DummyChild&lt;/span> &lt;span class="na">themeColor&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;#EDE3D9&amp;#34;&lt;/span> &lt;span class="p">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">AnotherDummyChild&lt;/span> &lt;span class="na">themeColor&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;#EDE3D9&amp;#34;&lt;/span> &lt;span class="p">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">Screen&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">Login&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">Screen&lt;/span> &lt;span class="na">themeColor&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;black&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">DummyChild&lt;/span> &lt;span class="na">themeColor&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;black&amp;#34;&lt;/span> &lt;span class="p">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">AnotherDummyChild&lt;/span> &lt;span class="na">themeColor&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;black&amp;#34;&lt;/span> &lt;span class="p">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">Screen&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="you-see-the-problem-here">You see the problem here?&lt;/h3>
&lt;p>How do I maintain the style characteristics of every screen and its &lt;code>children&lt;/code> without coupling each screen to its &lt;code>children&lt;/code>? In a realistic app you can have a lot more screens and even more &lt;code>children&lt;/code> &lt;em>(good for ya!)&lt;/em> and not all screens share the same &lt;code>children&lt;/code>. It&amp;rsquo;s a mess.&lt;/p>
&lt;h2 id="enter-prop-injection">Enter Prop Injection&lt;/h2>
&lt;p>We need to dynamically pass props to &lt;code>children&lt;/code> without having to write them manually every time. We also don&amp;rsquo;t want any &lt;code>children&lt;/code> to assume which screen they&amp;rsquo;re in; &lt;code>children&lt;/code> should be reusable in different screens. So our aim is close to this&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-jsx" data-lang="jsx">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">Screen&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">({&lt;/span>&lt;span class="nx">themeColor&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">children&lt;/span>&lt;span class="p">})&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">Header&lt;/span> &lt;span class="na">themeColor&lt;/span>&lt;span class="p">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{...&lt;/span>&lt;span class="nx">children&lt;/span> &lt;span class="nx">themeColor&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">Footer&lt;/span> &lt;span class="na">themeColor&lt;/span>&lt;span class="p">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">Landing&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">Screen&lt;/span> &lt;span class="na">themeColor&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;#EDE3D9&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">DummyChild&lt;/span> &lt;span class="p">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">AnotherDummyChild&lt;/span> &lt;span class="p">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">Screen&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This code unfortunately doesn&amp;rsquo;t work (in this current form). But it already looks way cleaner and somewhat magical.&lt;/p>
&lt;p>We can make it work though! Let&amp;rsquo;s make a function that injects &lt;code>props&lt;/code> to the passed &lt;code>children&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-jsx" data-lang="jsx">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">inject&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">props&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{},&lt;/span> &lt;span class="nx">children&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">React&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Children&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">map&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">children&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">child&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">React&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">isValidElement&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">child&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="nx">React&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">cloneElement&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">child&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">props&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="nx">child&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Let&amp;rsquo;s get &lt;code>React.isValidElement(child)&lt;/code> out of the way, it&amp;rsquo;s just for handling stuff like raw strings and it&amp;rsquo;s there for sanity.&lt;/p>
&lt;p>What &lt;code>inject&lt;/code> does is quite simple: It takes some &lt;code>children&lt;/code> &lt;em>(this post will get me in too much trouble)&lt;/em> and dynamically injects the provided props in each one of them before rendering them. And this is done by cloning the &lt;code>child&lt;/code> &lt;em>(Goodness 🤦🏻‍♂️)&lt;/em> and injecting the new props.&lt;/p>
&lt;p>I know you&amp;rsquo;re probably thinking now &lt;em>&amp;ldquo;Oh but this must be quite inefficient!&amp;rdquo;&lt;/em>. You&amp;rsquo;re right to think so, but it&amp;rsquo;s actually not correct. I&amp;rsquo;ll tap on that later below, but first let&amp;rsquo;s see how this will improve our code&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-jsx" data-lang="jsx">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">Screen&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">({&lt;/span>&lt;span class="nx">themeColor&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">children&lt;/span>&lt;span class="p">})&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">Header&lt;/span> &lt;span class="na">themeColor&lt;/span>&lt;span class="p">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="nx">inject&lt;/span>&lt;span class="p">({&lt;/span>&lt;span class="nx">themeColor&lt;/span>&lt;span class="p">},&lt;/span> &lt;span class="nx">children&lt;/span>&lt;span class="p">)}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">Footer&lt;/span> &lt;span class="na">themeColor&lt;/span>&lt;span class="p">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>As you can see, this is the working code for the pseudo &lt;code>{...children themeColor}&lt;/code>. Now we can simply pass any &lt;code>child&lt;/code> to a &lt;code>Screen&lt;/code> and it&amp;rsquo;ll dynamically inherit the screen&amp;rsquo;s properties&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-jsx" data-lang="jsx">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">Landing&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">Screen&lt;/span> &lt;span class="na">themeColor&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;#EDE3D9&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">DummyChild&lt;/span> &lt;span class="p">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">AnotherDummyChild&lt;/span> &lt;span class="p">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">Screen&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Yep, nothing changed. Pure magic.&lt;/p>
&lt;h2 id="the-case-for-reactcloneelement">The Case for &lt;code>React.cloneElement&lt;/code>&lt;/h2>
&lt;p>Well, at first I was going through this path with an experimental mindset. When I found that it&amp;rsquo;s actually a good-enough solution, I started to seriously consider its viability.&lt;/p>
&lt;p>Is &lt;code>React.cloneElement&lt;/code> a resource hog? Well, to my surprise it isn&amp;rsquo;t. I was digging for resources about it and I found out this whole experiment already has a term now in the react community and people had this &lt;a href="https://stackoverflow.com/questions/54922160/react-cloneelement-in-list-performance">performance discussion&lt;/a> already. In fact, some nice guy made a &lt;a href="https://gist.github.com/nemoDreamer/21412b28dc65d51e2c5c8561a8f82ce1">benchmark&lt;/a> for it. So yeah it&amp;rsquo;s good.&lt;/p>
&lt;hr>
&lt;h2 id="afterthoughts">Afterthoughts&lt;/h2>
&lt;p>You now reached the state I was in when I first worked on that project. But you know much better of its pitfalls and why it is the way it is. Let&amp;rsquo;s talk improvements in the comments!&lt;/p>
&lt;h2 id="reddit-discussion-thread">Reddit Discussion Thread&lt;/h2>
&lt;iframe id="reddit-embed" src="https://www.redditmedia.com/r/reactjs/comments/1056t7r/react_props_injection_selfreview_2_the_upsidedown/?ref_source=embed&amp;amp;ref=share&amp;amp;embed=true" sandbox="allow-scripts allow-same-origin allow-popups" style="border: none;" height="126" width="640">&lt;/iframe>&lt;br>&lt;br>
&lt;p>&lt;strong>Ps&lt;/strong>: Full code can be found on &lt;a href="https://github.com/mhashim6/self-review/tree/main/react-prop-injection">GitHub&lt;/a>&lt;/p></description></item><item><title>Android Emulator Tips &amp; Tricks</title><link>https://blog.mhashim6.me/android-avd-emulator-tips-and-tricks/</link><pubDate>Sat, 10 Dec 2022 00:00:00 +0000</pubDate><guid>https://blog.mhashim6.me/android-avd-emulator-tips-and-tricks/</guid><description>&lt;h1 id="what-brings-me-here">What brings me here?&lt;/h1>
&lt;p>When I do Android stuff, my mind switches to survival mode; I try to make the best of what I have. Assuming you do as well, I present to you some of the tricks I use to make my sure demise a bit less terrible.&lt;/p>
&lt;h2 id="contents">Contents&lt;/h2>
&lt;ol>
&lt;li>&lt;a href="#avd-screenshots">Native Screenshots on Android Emulator&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#avd-screenshots-straightforward">Straightforward way&lt;/a>&lt;/li>
&lt;li>&lt;a href="#avd-screenshots-adb">ADB way&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#avd-shake">Shaking the Emulator&lt;/a>&lt;/li>
&lt;li>&lt;a href="#avd-swipe">Swiping with 2 fingers&lt;/a>&lt;/li>
&lt;/ol>
&lt;p>Equipped with these tricks, you may now go on hating on Android as you were, with double the fingers and a good shake.&lt;/p>
&lt;h2 id="avd-screenshots">Trigger Native Screenshots on AVD&lt;/h2>
&lt;blockquote>
&lt;p>This will help you trigger a native screen capture event on a device that you don’t have physical access to (Virtual devices/ emulators).&lt;/p>
&lt;/blockquote>
&lt;h3 id="avd-screenshots-straightforward">Straightforward way&lt;/h3>
&lt;p>&lt;strong>Support:&lt;/strong> Up to &lt;code>API 29&lt;/code>&lt;/p>
&lt;h4 id="steps">Steps&lt;/h4>
&lt;ol>
&lt;li>Hold down the power button on the emulator’s sidebar&lt;/li>
&lt;li>Click on the Screenshot icon&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://blog.mhashim6.me/images/avd-tips-and-tricks/screenshot.png" alt="screenshot" title="screenshot">&lt;/p>
&lt;h3 id="avd-screenshots-adb">Using ADB&lt;/h3>
&lt;blockquote>
&lt;p>This way is quite flexible; it simulates a key press on the device&amp;rsquo;s GPIO buttons (Power, volume…etc).&lt;br>
&lt;strong>Support:&lt;/strong> All API versions&lt;/p>
&lt;/blockquote>
&lt;video controls loop="true">
&lt;source src="https://blog.mhashim6.me/videos/avd-tips-and-tricks/screenshot2.mov"/>
&lt;/video>
&lt;h4 id="steps-1">Steps&lt;/h4>
&lt;ol>
&lt;li>Configure the adb shell to run with root privileges&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">adb root
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="2">
&lt;li>Determine your device id:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">adb shell getevent
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>On the emulator click on any of the volume buttons, and observe the terminal. You should see output similar to this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">/dev/input/event12: &lt;span class="m">0001&lt;/span> &lt;span class="m">0072&lt;/span> &lt;span class="m">00000001&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/blockquote>
&lt;blockquote>
&lt;p>This makes your device id: &lt;code>/dev/input/event12&lt;/code>.&lt;/p>
&lt;/blockquote>
&lt;ol start="3">
&lt;li>Start the adb shell&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">adb shell
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="4">
&lt;li>Copy this script and make sure to substitute the device id with yours.&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">cat &amp;gt; /data/local/tmp/snap.sh &lt;span class="s">&amp;lt;&amp;lt;EOF
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">#!/bin/sh
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">echo ‘volume key: down’
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">sendevent /dev/input/event12 1 114 1
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">echo ‘power key: down’
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">sendevent /dev/input/event12 1 116 1
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">sendevent /dev/input/event12 0 0 0
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">sleep 1
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">echo ‘volume key: up’
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">sendevent /dev/input/event12 1 114 0
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">echo ‘power key: up’
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">sendevent /dev/input/event12 1 116 0
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">sendevent /dev/input/event12 0 0 0
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">EOF&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>Paste the script in your adb shell &lt;em>(This script holds down the power and volume-down buttons for one second, then releases them.)&lt;/em>&lt;/p>
&lt;/blockquote>
&lt;ol start="5">
&lt;li>Take Screenshots&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">sh /data/local/tmp/snap.sh
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h2 id="avd-shake">Shaking the emulator&lt;/h2>
&lt;video controls loop="true">
&lt;source src="https://blog.mhashim6.me/videos/avd-tips-and-tricks/shake.mov"/>
&lt;/video>
&lt;p>This one is simple &lt;em>(android simple that is)&lt;/em>. &lt;em>All&lt;/em> you have to do is:&lt;/p>
&lt;ol>
&lt;li>Go to emulator settings (the 3 dots thingy)&lt;/li>
&lt;li>&lt;strong>Virtual Sensors&lt;/strong>&lt;/li>
&lt;li>&lt;strong>Device Pose&lt;/strong>&lt;/li>
&lt;li>Select &lt;strong>Move&lt;/strong>&lt;/li>
&lt;li>Have fun with any of the sliders&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h2 id="avd-swipe">Swiping with 2 fingers&lt;/h2>
&lt;video controls loop="true">
&lt;source src="https://blog.mhashim6.me/videos/avd-tips-and-tricks/swipe.mov"/>
&lt;/video>
&lt;p>Often we like to swipe with 2 fingers on an emulator. I was writing a script for it. But I found out it’s natively (and horribly) supported now. I’ve recorded a video showing the required keystrokes (yep they’re quite a few) and I’ll also list them here:&lt;/p>
&lt;ol>
&lt;li>Hold &lt;strong>⇧ Shift&lt;/strong>&lt;/li>
&lt;li>Hold &lt;strong>⌘ Command&lt;/strong>&lt;/li>
&lt;li>Slightly move your mouse cursor so that you have 2 aligned-circles representing 2 fingers&lt;/li>
&lt;li>Now Right-Click with your mouse and swipe into the required direction.&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>That’s right 4 convoluted steps and they require a mouse &lt;em>(the trackpad won’t work)&lt;/em>. That’s what you get when working with Android ¯\&lt;em>(ツ)&lt;/em>/¯&lt;/p>
&lt;/blockquote>
&lt;h2 id="resources">Resources&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://stackoverflow.com/questions/44495473/android-how-to-access-emulator-screenshot-via-emulator">StackOverflow &lt;em>(a real shocker)&lt;/em>&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Audio Player in Js - Self-Review #1</title><link>https://blog.mhashim6.me/audio-player-code-review/</link><pubDate>Mon, 28 Nov 2022 00:00:00 +0000</pubDate><guid>https://blog.mhashim6.me/audio-player-code-review/</guid><description>&lt;blockquote>
&lt;p>This is the first post in an &lt;a href="https://blog.mhashim6.me/categories/self-review-series/">ongoing series&lt;/a> of Self-Code-Review. Where I pick &lt;em>subjectively&lt;/em> unique and interesting modules, in different projects, architectures, and languages.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>It’s not always the code that matters, it’s the critiques and observations that we will learn most from.&lt;/p>
&lt;/blockquote>
&lt;p>I know you guys have a tendency to skip through the whole thing only looking for the text in a &lt;code>monospace&lt;/code> typeface &lt;em>(Don’t deny it)&lt;/em> so I’ve something just for you: A collapsible text that you only have to read if you think it’s starting to get interesting.&lt;/p>
&lt;details>
&lt;summary>What is this? What am I doing here?&lt;/summary>
&lt;p>
We all have this moment when we look back at older code, take some time to remember that it was us who wrote it, and then feel happy that we can now tell how horrible it is, and how we could improve it now, just to loath it again 6 months in the future.
&lt;p>
This is basically it: In every post in this series I’ll provide a guide on how to build a certain feature/component. And then iterate on it pinpointing what could be better, what could be added, and why some things need to remain the way they are.
&lt;/p>
&lt;/details>
&lt;h2 id="audio-player-library">Audio-Player Library&lt;/h2>
&lt;p>We finally made it here! We want to make a reusable, typical audio player API that we can later use in many contexts be it user interaction or a response to an app event…etc.&lt;/p>
&lt;p>We need to define some core functionality that should exist in a standard audio player:&lt;/p>
&lt;ul>
&lt;li>play audio &lt;em>(Oh my goodness, gracious me!)&lt;/em>&lt;/li>
&lt;li>pause audio&lt;/li>
&lt;li>resume audio&lt;/li>
&lt;li>stop audio&lt;/li>
&lt;li>play multiple audio(&lt;em>s?&lt;/em>)&lt;/li>
&lt;li>repeat/ loop&lt;/li>
&lt;/ul>
&lt;p>And to be more realistic we need some way to know what’s actually going on, they call that event listeners:&lt;/p>
&lt;ul>
&lt;li>onPlay&lt;/li>
&lt;li>onTimeUpdate&lt;/li>
&lt;li>onPause&lt;/li>
&lt;li>onStop&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="making-some-noise">Making some noise&lt;/h2>
&lt;p>Like a good API, ours shouldn’t make assumptions about who is using it. It shouldn’t matter if it’s a react component or the man sitting inside your TV.&lt;/p>
&lt;details>
&lt;summary>Just hook into an &lt;code>audio&lt;/code> tag mate! &lt;i>(you think?)&lt;/i>&lt;/summary>
&lt;p>We can’t rely on UI (or in this case the &lt;code>DOM&lt;/code>) to make our native audio player (even though we can totally do it this way). It’d be much better if our code is self-sufficient and reusable in many scenarios.&lt;/p>
&lt;/details>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="nx">player&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">Audio&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Luckily for us, we have a native &lt;code>Audio&lt;/code> API in Js that we can &lt;del>ab&lt;/del>use. It gives us primitives that we can build upon much more sophisticated functionalities.&lt;/p>
&lt;p>Let’s start simple and &lt;code>play&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">export&lt;/span> &lt;span class="kr">const&lt;/span> &lt;span class="nx">play&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">url&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">stop&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">player&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">src&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">url&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">player&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">play&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;details>
&lt;summary>We made some bold decisions here!&lt;/summary>
&lt;p>First we accept the audio to play in the form of a &lt;code>url string&lt;/code>. One would think that's not the most future proof choice to make; A wrapper object of sorts that encapsulates the format of audio file to play would be better and can be easier to tweak in the future.&lt;/p>
&lt;p>A counter argument would be that's not very likely (in the context of the project this was built in) that this api will be going to do more. Future proofing is always good, but realism and time constrains should always govern all decisions.&lt;/p>
&lt;p>Personally? I think it's not that complex or lengthy to implement a wrapper for our audio uri. I was just being lazy.&lt;/p>
&lt;p>We also added a call to &lt;code>stop()&lt;/code>! Why? It's the cheap way of running things in order. What is &lt;code>stop()&lt;/code>? Glad you asked!&lt;/p>
&lt;/details>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">export&lt;/span> &lt;span class="kr">const&lt;/span> &lt;span class="nx">stop&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">player&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">pause&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">player&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">currentTime&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Yes, it&amp;rsquo;s like manually adjusting your tape player.&lt;/p>
&lt;p>How can we improve this? I think a sharp &lt;strong>STOP&lt;/strong> isn&amp;rsquo;t exactly polite and not what you want to hear, it&amp;rsquo;d be sweet to add some fading effect. But yeah, total perfectionism.&lt;/p>
&lt;p>Two core functionalities remain:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">export&lt;/span> &lt;span class="kr">const&lt;/span> &lt;span class="nx">resume&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">player&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">play&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">export&lt;/span> &lt;span class="kr">const&lt;/span> &lt;span class="nx">pause&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">player&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">pause&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;details>
&lt;summary>Now we're ready to discuss a bigger design choice: Why is it all just functions?&lt;/summary>
&lt;p>It's not a paradigm war, if you put this code inside a class, you'll probably instantiate one object to use in your app. For some folk this is known as a &lt;code>static class&lt;/code>. And this is just another fancy word for redundancy.&lt;/p>
&lt;/details>
&lt;hr>
&lt;h2 id="events">Events&lt;/h2>
&lt;p>This is my &lt;code>onPlay&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">export&lt;/span> &lt;span class="kr">const&lt;/span> &lt;span class="nx">onPlay&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">action&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">cb&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">action&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">player&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">src&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">player&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">addEventListener&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;play&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">cb&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">player&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">removeEventListener&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;play&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">cb&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Simple as it is, it gives the user a way out by returning a function that unsubscribes from the event.&lt;/p>
&lt;p>The same applies to other events&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">export&lt;/span> &lt;span class="kr">const&lt;/span> &lt;span class="nx">onTimeUpdate&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">action&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">cb&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">action&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">player&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">src&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">player&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">currentTime&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">player&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">addEventListener&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;timeupdate&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">cb&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">player&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">removeEventListener&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;timeupdate&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">cb&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">export&lt;/span> &lt;span class="kr">const&lt;/span> &lt;span class="nx">onPause&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">action&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">cb&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">action&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">player&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">src&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">player&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">addEventListener&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;pause&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">cb&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">player&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">removeEventListener&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;pause&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">cb&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">export&lt;/span> &lt;span class="kr">const&lt;/span> &lt;span class="nx">onStop&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">action&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">cb&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">action&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">player&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">src&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">player&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">addEventListener&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;ended&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">cb&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">player&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">removeEventListener&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;ended&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">cb&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h2 id="a-playlist">A playlist&lt;/h2>
&lt;p>Our lib now is good at playing one audio at a time, this is good. It&amp;rsquo;s also useless TBH. How can we make that &lt;em>(a playlist)&lt;/em> happen using the primitives we originally had and the ones we created?&lt;/p>
&lt;p>We know we don&amp;rsquo;t have a way to add multiple sources to our player, so we have to make our own way of queuing these audio sources&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="nx">queue&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[];&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This simple &lt;code>queue&lt;/code> holds our audio urls. We can now play one audio after the other as soon as it&amp;rsquo;s finished playing. We have a way to know if an audio is started or stopped. We&amp;rsquo;ll definitely take advantage of that&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">next&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">playlist&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">queue&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">export&lt;/span> &lt;span class="kr">const&lt;/span> &lt;span class="nx">playlist&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">urls&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">clear&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">clear&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">queue&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">queue&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">push&lt;/span>&lt;span class="p">(...&lt;/span>&lt;span class="nx">urls&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">queue&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">length&lt;/span> &lt;span class="o">!==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">upcoming&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">queue&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">shift&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">player&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">src&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">upcoming&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">player&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">removeEventListener&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;ended&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">next&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">player&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">addEventListener&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;ended&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">next&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">player&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">play&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">player&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">removeEventListener&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;ended&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">next&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Because we don&amp;rsquo;t have control over when the audio ends (we can&amp;rsquo;t always end it ourselves), we can&amp;rsquo;t iterate on the queue and play its contents one by one. So we have to use recursion &lt;em>(always exciting, isn&amp;rsquo;t it?)&lt;/em>&lt;/p>
&lt;p>We first declared a &lt;code>next()&lt;/code> function that calls &lt;code>playlist()&lt;/code> again when the &lt;code>ended&lt;/code> event fires. And we stop doing that when the queue is empty.&lt;/p>
&lt;p>We also added the option to start a new playlist by providing a &lt;code>clear&lt;/code> flag. Neat!&lt;/p>
&lt;h3 id="how-to-loop">How to loop?&lt;/h3>
&lt;p>At first, we could just add another flag and call it a day, but it becomes more complicated&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">export&lt;/span> &lt;span class="kr">const&lt;/span> &lt;span class="nx">playlist&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">urls&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">clear&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">loop&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Our &lt;code>next()&lt;/code> now has to support this flag as well but wait! What&amp;rsquo;s it gonna be? &lt;code>true&lt;/code>? to always loop, or &lt;code>false&lt;/code>? It can&amp;rsquo;t be &lt;code>false&lt;/code> though otherwise we&amp;rsquo;d not have implemented it in the first place.&lt;/p>
&lt;p>Here is the part of code that reminds you that nothing can be perfect. You add a hack to support a false sense of dynamic setting of the &lt;code>loop&lt;/code> flag&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">next&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">playlist&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">queue&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">nextLoop&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">playlist&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">queue&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>We&amp;rsquo;ll have to update our logic to fit the new hacky &lt;code>nextLoop()&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">queue&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">length&lt;/span> &lt;span class="o">!==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">upcoming&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">queue&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">shift&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">loop&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">queue&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">push&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">upcoming&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">player&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">src&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">upcoming&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">player&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">removeEventListener&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;ended&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">loop&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="nx">nextLoop&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="nx">next&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">player&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">addEventListener&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;ended&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">loop&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="nx">nextLoop&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="nx">next&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">player&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">play&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">player&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">removeEventListener&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;ended&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">loop&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="nx">nextLoop&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="nx">next&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Yep, it lost its beauty. I won&amp;rsquo;t even comment on the &lt;code>loop ? nextLoop : next&lt;/code> part. You know what&amp;rsquo;s wrong with it and how to improve it.&lt;/p>
&lt;p>But it&amp;rsquo;s not even done yet! We still need a way to notify the caller when each audio in the playlist is about to be played. We&amp;rsquo;ll have to accept a callback to do that&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">onPlayNext&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">url&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">({});&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">export&lt;/span> &lt;span class="kr">const&lt;/span> &lt;span class="nx">playlist&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">urls&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">clear&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">loop&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">onNext&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">onPlayNext&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>And in the function body we modified it a little&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">player&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">play&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">queue&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">length&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nx">onNext&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">upcoming&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// readability: 0
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>What saddens me most is that Javascript acts weird when you use default arguments in your functions; Even though we added a default callback in case the user doesn&amp;rsquo;t want to use this feature, this has an effect of permanently calling the default value even if the user supplied their own! &lt;em>Classic JavaScript eh?&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="nx">onPlayNext&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">url&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">({});&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">export&lt;/span> &lt;span class="kr">const&lt;/span> &lt;span class="nx">playlist&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">urls&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">clear&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">loop&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">onNext&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">onPlayNext&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">onPlayNext&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">onNext&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;details>
&lt;summary>This is the ugly fix in case you're wondering. And it brings problems of its own&lt;/summary>
&lt;p>You're now playing with globals that can very easily interleave. Yes, Js is single-threaded but it's possible to have all sorts of fun race conditions when using the event loop. We'll tap on that later.&lt;/p>
&lt;p>We also have a very ugly and confusing code to handle &lt;code>onNext&lt;/code>.&lt;/p>
&lt;/details>
&lt;p>I&amp;rsquo;ll have to ask you to remember that we also have a &lt;code>play()&lt;/code> function that plays singular audio. It was calling &lt;code>stop()&lt;/code> before and that was nice. But now that we introduced &lt;code>playlist()&lt;/code>, our &lt;code>stop()&lt;/code> won&amp;rsquo;t be as powerful. We have to &lt;em>reset&lt;/em> the playlist whenever we call &lt;code>stop()&lt;/code> just in case it was playing.&lt;/p>
&lt;p>We can make life easier for us by adding a &lt;code>clear()&lt;/code> function that..&lt;em>clears&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">export&lt;/span> &lt;span class="kr">const&lt;/span> &lt;span class="nx">clear&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">queue&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">player&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">removeEventListener&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;ended&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">next&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>When we &lt;code>clear()&lt;/code> the queue, it&amp;rsquo;s pretty clear &lt;em>(no pun intended)&lt;/em> that we lost interest in the current queue and/or audio. We no longer need to play the next audio because there isn&amp;rsquo;t one. that&amp;rsquo;s why we removed the &lt;code>ended&lt;/code> listener. Now our &lt;code>stop()&lt;/code> can look like this&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">export&lt;/span> &lt;span class="kr">const&lt;/span> &lt;span class="nx">stop&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">player&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">pause&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">player&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">currentTime&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">clear&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h2 id="afterthoughts">Afterthoughts&lt;/h2>
&lt;p>You now reached the state I was in when I first worked on that project. But you know much better of its pitfalls and why it is the way it is. We can now briefly talk improvements:&lt;/p>
&lt;ul>
&lt;li>This can be safer by declaring the APIs as &lt;code>async&lt;/code>. Sure it&amp;rsquo;ll introduce complexity but can provide safe access to state&lt;/li>
&lt;li>&lt;code>loop&lt;/code> shouldn&amp;rsquo;t be a luggage to carry, it can be better represented as a state&lt;/li>
&lt;li>Don&amp;rsquo;t let js stop your dreams; check if &lt;code>onNext&lt;/code> is null instead of the default function arg&lt;/li>
&lt;li>Insert yours here!&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>&lt;strong>Ps&lt;/strong>: Full code can be found on &lt;a href="https://github.com/mhashim6/self-review/tree/main/audio-player">GitHub&lt;/a>&lt;/p></description></item><item><title>Latent</title><link>https://blog.mhashim6.me/latent/</link><pubDate>Sun, 27 Nov 2022 00:00:00 +0000</pubDate><guid>https://blog.mhashim6.me/latent/</guid><description>&lt;blockquote>
&lt;p>Muffled, and low &lt;br>
Dimmed behind the glow &lt;br>
Latent—can’t blow &lt;br>
Caged, ticking to go&lt;br>
Loud cries arose&lt;/p>
&lt;p>Stories to tell &lt;br>
Misfit and ill &lt;br>
Latent—lest they peril &lt;br>
Recorded, in seals they dwell &lt;br>
There they lie, upon a rusty sill&lt;/p>
&lt;p>Guilt is weighing on &lt;br>
The burden is all grown &lt;br>
Latent—Can’t be thrown &lt;br>
Embodied, crushing bone &lt;br>
The way to die alone&lt;/p>
&lt;p>— &lt;strong>Muhammad Hashim&lt;/strong>&lt;/p>
&lt;/blockquote></description></item><item><title>The Responsible Git User</title><link>https://blog.mhashim6.me/responsible-git-user-guide/</link><pubDate>Tue, 15 Nov 2022 00:00:00 +0000</pubDate><guid>https://blog.mhashim6.me/responsible-git-user-guide/</guid><description>&lt;h1 id="who-is-this-for-_whom_">Who is this for &lt;em>(whom?)&lt;/em>&lt;/h1>
&lt;p>It doesn’t matter if you don’t know Git that well, or if you already are an expert on Git and you know your way around and how to tackle the daily awkward situations of reverting a rebase, resolving a conflict &lt;em>(in the workplace)&lt;/em>, or dragging a teammate in the little whoopsie you made in your (was-once-local) branch.&lt;/p>
&lt;p>It also doesn’t matter if you’re pro GitFlow or in favour of trunk-based stuff. This is about how to be a &lt;strong>R&lt;/strong>esponsible &lt;strong>G&lt;/strong>it &lt;strong>U&lt;/strong>ser. Or in short, how to &lt;em>&lt;strong>RGU&lt;/strong>&lt;/em> &lt;em>(see what I did there?)&lt;/em>&lt;/p>
&lt;h2 id="micro-commits">Micro commits&lt;/h2>
&lt;blockquote>
&lt;p>Because no one wants to deal with a dump &lt;em>(of anything)&lt;/em>.&lt;/p>
&lt;/blockquote>
&lt;p>You see, a well-behaved Git user won’t dump a truckload worth of changes in one single commit. You see, managing a whole dump is never fun; dumps are made to stay the way they are: dumps.&lt;/p>
&lt;p>The only transformation you can apply to a dump is to either shape it into a smelly cube to later stack it in a rather symmetric-looking bigger dump, or if you’re a bit flexible you’d typically burn it and pretend it never was. Because no one wants to deal with a dump &lt;em>(of anything)&lt;/em>.&lt;/p>
&lt;p>Instead of putting all your heart in one big concentrated dose and having it broken in the end, make gradual steps to give yourself &lt;em>(and your &lt;del>loved ones&lt;/del> teammates)&lt;/em> a space to reflect, assess and change.&lt;/p>
&lt;h2 id="scoped-contextual-commits">Scoped/ Contextual Commits&lt;/h2>
&lt;p>Okay, now your commits are smaller and easier to manage and review… Wait! At what cost?
Did you make one commit per file? Our goal was not to replace the dump with a chunk of smaller-in-size meaningless dumps; actually, the original dump was easier to manage believe it or not.&lt;/p>
&lt;blockquote>
&lt;p>It’s hardly big of a change, and it’s well-scoped and makes sense on its own.&lt;/p>
&lt;/blockquote>
&lt;p>You should instead put more effort into selecting what parts/ files to include in your commit before creating it. For example, You created functionality that relies on some random factor like time.&lt;/p>
&lt;p>Now as a responsible engineer you probably created the logic that provides this random factor and wrote some tests for it. Now it’d make sense to include this random function in its own commit; It’s hardly big of a change, and it’s well-scoped and makes sense on its own.&lt;/p>
&lt;h2 id="valid-sane-commits">Valid/ Sane Commits&lt;/h2>
&lt;p>Doing better already! But &lt;em>bro does it even build?&lt;/em>
Remember our last example? Of course you do I was just trying to patronise you &lt;em>(and it seems to be working, eh?)&lt;/em> We had two components: A component that merely exists to make my point, and a random-time-function-thingy. Each with their tests of course as a responsible engineer.&lt;/p>
&lt;blockquote>
&lt;p>You’ve produced a history that doesn’t even compile!&lt;/p>
&lt;/blockquote>
&lt;p>Now, what files would you commit first? The random thingy &lt;em>(with its tests)&lt;/em> or the fake component &lt;em>(with its tests)&lt;/em> that depends on the random thingy? If you commit the component without its dependency then you’ve produced a history that doesn’t even compile! Have we not had enough of that already?&lt;/p>
&lt;p>You should always try your best to have a valid and sane history tree; this immensely helps with recovery, traceability, and stability. It’s also basic CI so you get to flex about the buzzwords with your mates!&lt;/p>
&lt;h2 id="self-explanatory-commits-that-summarise-what-they-do">Self-explanatory Commits that summarise what they do&lt;/h2>
&lt;h2 id="its-not-supposed-to-be-write-only">It’s not supposed to be write-only&lt;/h2>
&lt;p>You’d be amazed to see how many hours one can spend reading a Git history to find when something was done. Now you’ll shout at me: &lt;em>just use &lt;code>blame&lt;/code> bro!&lt;/em> But I’m afraid sometimes even blame can’t do any good with long, and corrupt histories &lt;em>(Yes I’m very pleased with myself right now)&lt;/em>.&lt;/p>
&lt;p>But if you’re a Responsible Git User and you’re investing time in your commits and thinking of them in the grand scheme of things (basically other teammates playing their role in your common history). The history tree will be much simpler and cleaner to the degree that you might be able to blame each other (in corporate) again! Yay!&lt;/p>
&lt;h2 id="historic-timeline">Historic Timeline&lt;/h2>
&lt;blockquote>
&lt;p>Minor details should be there only if you look for them.&lt;/p>
&lt;/blockquote>
&lt;p>You finally get the chance to write History! &lt;em>(I know enough of this joke already it wasn’t even this funny)&lt;/em> But what do you write? everything? or EVERYTHING? or important, notable things?&lt;/p>
&lt;p>I’m sure many throughout History have sneezed but I bet you were not told that about any famous character in history class.
Not every single detail needs to be available at first sight. Minor details should be there only if you look for them, leaving space for major events and changes.&lt;/p>
&lt;p>Using the previous example one last time, once you’re done with the fake component (and its tests) and you’re ready to add it to the main tree, take a pause, think about this change in a slightly higher-level context and squash the closely related commits into a slightly bigger commit.&lt;/p>
&lt;p>This way the main tree is not flooded with micro commits that served their purpose long ago, and yet you preserved the dozen commits that highlight the major event that you induced. Lovely!&lt;/p>
&lt;hr>
&lt;p>Do you know better ways to &lt;strong>&lt;em>RGU&lt;/em>&lt;/strong>? let’s argue in the comments! &lt;em>(sorry one last time)&lt;/em>.&lt;/p></description></item><item><title>Hello, Winter!</title><link>https://blog.mhashim6.me/hello-winter/</link><pubDate>Wed, 26 Oct 2022 00:00:00 +0000</pubDate><guid>https://blog.mhashim6.me/hello-winter/</guid><description>&lt;blockquote>
&lt;p>Hello, Winter!&lt;br>
What took thee so long?&lt;br>
I pray all’s well,&lt;br>
Come sit along&lt;br>
Tell us of the pains&lt;br>
Thou carried all along&lt;br>
Since yesteryear&lt;br>
And the years long gone&lt;/p>
&lt;p>The memories fade not&lt;br>
The nightmares linger on&lt;br>
Did the days not grow dark,&lt;br>
Nor the shadows grew long?&lt;br>
Tell me now, Winter!&lt;br>
Am I so wrong?&lt;/p>
&lt;p>Come, O’ Winter!&lt;br>
Pour thy rain&lt;br>
Wash me clean&lt;br>
And carry my pain&lt;br>
For I’m not certain&lt;br>
If I will meet thee, Winter,&lt;br>
When thou dost visit, again.&lt;/p>
&lt;p>— &lt;strong>Muhammad Hashim&lt;/strong>&lt;/p>
&lt;/blockquote></description></item><item><title>Guide to Tolkien's works</title><link>https://blog.mhashim6.me/guide-to-tolkiens-works/</link><pubDate>Sat, 24 Sep 2022 00:00:00 +0000</pubDate><guid>https://blog.mhashim6.me/guide-to-tolkiens-works/</guid><description>&lt;p>Often I get asked about how to approach Tolkien&amp;rsquo;s works. It can be overwhelming to start reading them so I’ll try my best to maintain this thread about how to approach (some of) Tolkien’s works:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="#the-children-of-hurin">The Children of Húrin&lt;/a>&lt;/li>
&lt;li>&lt;a href="#the-fall-of-gondolin">The Fall of Gondolin&lt;/a>&lt;/li>
&lt;li>&lt;a href="#the-hobbit-and-lotr">The Hobbit &amp;amp; The Lord of The Rings&lt;/a>&lt;/li>
&lt;li>&lt;a href="#beren-and-luthien">Beren and Lúthien (and The Lay of Leithian)&lt;/a>&lt;/li>
&lt;li>&lt;a href="#silmarillion">The Silmarillion (and The Book of Lost Tales)&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>This ordering might be confusing but to my experience it is quite luring. The Hobbit and LOTR are well known and most of us have watched the movies &lt;em>(Even though they are so far from the books but still the main storyline is there)&lt;/em> so I’d say save it for later when you are more immersed in the world of “Middle Earth”.&lt;/p>
&lt;h2 id="the-children-of-hurin">Starting with &lt;a href="https://www.goodreads.com/book/show/597790.The_Children_of_H_rin">The Children of Húrin&lt;/a>&lt;/h2>
&lt;p>&lt;img src="https://m.media-amazon.com/images/I/51l0B3EVhPL.jpg" alt="book cover">
I believe this is best way to enter Tolkien’s world; It’s so rich in raw emotions and lore. It features a rich mix of the world’s races and struggles. In a tragic fantasy &lt;em>(make no mistake, Tolkien’s works are dark fantasy and often sway far from merry)&lt;/em> about fate, redemption and psychological strength with a sheer reflection on our world, as the main characters are mere humans.&lt;/p>
&lt;h2 id="the-fall-of-gondolin">&lt;a href="https://www.goodreads.com/book/show/39798828-the-fall-of-gondolin">The Fall of Gondolin&lt;/a>&lt;/h2>
&lt;p>&lt;img src="https://images-na.ssl-images-amazon.com/images/I/71xsQ4ZFKdL.jpg" alt="book cover">
This one is rather short, compared to other Tolkien stories. However, it&amp;rsquo;s one of the best examples of the extreme lengths Tolkien goes through when he sets a scene. Here he sets many scenes of life phases: childhood, conflict, glory, and fatality.&lt;/p>
&lt;p>The hidden city of Gondolin remains the most remembered fictional city in the world with its iconic feats.&lt;/p>
&lt;h2 id="the-hobbit-and-lotr">The Hobbit &amp;amp; LOTR&lt;/h2>
&lt;p>&lt;img src="https://i.ebayimg.com/images/g/03QAAOSwVEpf~tzH/s-l640.jpg" alt="book cover">
It&amp;rsquo;s safe to assume that almost everyone is familiar with these through Peter Jackson’s films. Though most of the main plot points are featured in the films, the books differ greatly in events, themes, and overall sensation.&lt;/p>
&lt;p>The books are much darker and focus more on both the cerebral and emotional aspects of conflicts.&lt;br>
They&amp;rsquo;re also the lengthiest in Tolkien&amp;rsquo;s works.&lt;/p>
&lt;h2 id="beren-and-luthien">Of &lt;a href="https://www.goodreads.com/book/show/41015249-beren-and-l-thien">Beren and Lúthien&lt;/a> (And The Lay of Leithian)&lt;/h2>
&lt;p>&lt;img src="https://m.media-amazon.com/images/I/51voxpKiEDL.jpg" alt="book cover">&lt;/p>
&lt;p>This (of all things) is actually a Romance story. As dark as Tolkien’s world is, its romance is no different. The events of which lead to the major situation in The world, later found in &lt;em>“The Hobbit”&lt;/em> and “&lt;em>The Lord of the Rings&lt;/em>” Thousands of years after.&lt;br>
It tells about struggle, sacrifice, prejudice, and soaring above made-up boundaries.&lt;/p>
&lt;p>This one is so special, because it exists in two forms:&lt;/p>
&lt;ol>
&lt;li>A book, extracted from “&lt;em>The Silmarillion&lt;/em>” .&lt;/li>
&lt;li>A &lt;strong>Poem&lt;/strong>; Tolkien was always impressed by &lt;strong>the Greek Iliad&lt;/strong> and wanted to challenge &lt;strong>writing an epic entirely in Poetry&lt;/strong>. It’s called the “&lt;strong>&lt;em>Lay of Leithian&lt;/em>&lt;/strong>” It’s literally one of the most impressive poems in the English Literature that inspired many Poets and Songs.&lt;/li>
&lt;/ol>
&lt;h2 id="silmarillion">&lt;a href="https://www.goodreads.com/book/show/7332.The_Silmarillion">The Silmarillion&lt;/a> (and The Lost Tales)&lt;/h2>
&lt;p>&lt;img src="https://m.media-amazon.com/images/I/41k+B4mxcCL.jpg" alt="book cover">&lt;/p>
&lt;p>This is the end of our journey. The Silmarillion records the history of the world. There, Tolkien talked about how the world was created, major events that lead to our current world, and a high-level perspective on the tales described in his other books.&lt;br>
It contains detailed historical backgrounds and descriptions of the world; its languages and geography; and the people. It’s considered the book of books in Tolkien’s works.&lt;/p>
&lt;p>There is a &lt;strong>misconception&lt;/strong> about &amp;ldquo;The Silmarillion&amp;rdquo;: Some think that you can’t navigate through Tolkien’s world without first reading it. This is anything but right; The Silmarillion was published much later than other books. Plus it’s written in a &lt;strong>completely different style&lt;/strong> that is detailed and &lt;strong>overwhelming&lt;/strong> to anyone not familiar with the world. In fact, you shouldn’t read the Silmarillion unless you feel like you want to know the full story. Other than that, You can read all other works just fine.&lt;/p>
&lt;p>&lt;strong>The Book of Lost Tales&lt;/strong> contains other notes and drafts that Tolkien wrote but never published. Later, his family compiled these tales and published them in this series.&lt;/p>
&lt;hr>
&lt;p>You can comment your thoughts below using nothing but Telegram.&lt;/p></description></item><item><title>The Missing Docs on CircleCI (+Shell)</title><link>https://blog.mhashim6.me/circleci-shell-guide/</link><pubDate>Sun, 04 Sep 2022 00:00:00 +0000</pubDate><guid>https://blog.mhashim6.me/circleci-shell-guide/</guid><description>&lt;h1 id="the-missing-docs-on-circleci--shell">The Missing Docs on CircleCI (+ Shell)&lt;/h1>
&lt;p>Hi there! Many teams are relying on &lt;a href="https://circleci.com">CircleCI&lt;/a> to handle their CI (Continuos Integration) pipelines (I know we do @&lt;a href="https://www.instabug.com">Instabug&lt;/a>). CircleCI is actually very powerful. However, there are many scenarios you expect to be supported yet they (seemingly) are not. You&amp;rsquo;ve looked up the docs and the communiy&amp;rsquo;s collective knowledge yet you&amp;rsquo;re faced with either dead ends or some very complex, not-safe solutions.&lt;/p>
&lt;p>CircleCI is actually flexible (in its own way). You often can do (most of) the things you want to do. It&amp;rsquo;s just that you have to do them &lt;em>the CircleCI way&lt;/em>.&lt;/p>
&lt;p>I&amp;rsquo;ll provide here some Tools &amp;amp; Tips that will help You achieve many of the advanced scenarios you&amp;rsquo;ll face.&lt;/p>
&lt;h2 id="table-of-content">Table of Content&lt;/h2>
&lt;ol>
&lt;li>&lt;a href="#tools">Tools&lt;/a>
&lt;ol>
&lt;li>&lt;a href="#circle-cli">CircleCI CLI&lt;/a>&lt;/li>
&lt;li>&lt;a href="#circle-intellij-plugin">CircleCI Plugin for Intellij-based IDEs&lt;/a>&lt;/li>
&lt;li>&lt;a href="#shellcheck">ShellCheck&lt;/a>&lt;/li>
&lt;li>&lt;a href="#shfmt">shfmt&lt;/a>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>&lt;a href="#circle-tips">How to &lt;del>cope with depression&lt;/del> better approach CircleCI&lt;/a>
&lt;ol>
&lt;li>&lt;a href="#dynamic-parameters">Dynamic Parameters&lt;/a>&lt;/li>
&lt;li>&lt;a href="#dynamic-parameters-to-commands">Dynamic Parameters (to Commands)&lt;/a>&lt;/li>
&lt;li>&lt;a href="#env-var-in-shell">Using an Env. variable inside a shell script&lt;/a>&lt;/li>
&lt;li>&lt;a href="#shell-executable-permission">Getting “permission denied” when running a script even though it is executable&lt;/a>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>&lt;a href="#shell-tips-and-tricks">Shell tips and tricks&lt;/a>
&lt;ol>
&lt;li>&lt;a href="#json-jq">Json comes into your shell house, how do you say hi?&lt;/a>&lt;/li>
&lt;li>&lt;a href="#math-bc">How to do math&lt;/a>&lt;/li>
&lt;li>&lt;a href="#fail-early">Fail-early&lt;/a>&lt;/li>
&lt;li>&lt;a href="#network-request-fail">Network request failure&lt;/a>&lt;/li>
&lt;li>&lt;a href="#curl-silence">cURLy output? Use this formula&lt;/a>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;h2 id="tools">Tools&lt;/h2>
&lt;h3 id="circle-cli">CircleCI CLI&lt;/h3>
&lt;p>If you want to validate that your &lt;code>config.yml&lt;/code> file is syntactically correct &lt;em>(because that’s only what you’ll get)&lt;/em> &lt;em>&lt;strong>before&lt;/strong>&lt;/em> pushing to GitHub and be greeted by a &lt;code>build error&lt;/code>. Use &lt;a href="https://circleci.com/docs/local-cli" title="https://circleci.com/docs/local-cli">CircleCI’s local CLI&lt;/a> to static-check your file. it’ll not detect a type error, but it will detect a bad indentation or referencing a &lt;code>job&lt;/code> name that doesn&amp;rsquo;t exist. You know, everyday errors. &lt;em>You get used to it&lt;/em>.&lt;/p>
&lt;p>Install it then run:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">circleci config validate
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now you’ve made sure you’ll only be bothered by the harder, less obvious errors that were not detected. That’s progress!&lt;/p>
&lt;h3 id="circle-intellij-plugin">CircleCI Plugin for Intellij-based IDEs&lt;/h3>
&lt;p>The title says it all. It basically is a &lt;code>YAML&lt;/code> checker + some stuff that isn’t at all useful. But overall it will help you with some syntax errors (and false negatives) without manually looking for them. Install &lt;a href="https://plugins.jetbrains.com/plugin/13690-circleci" title="https://plugins.jetbrains.com/plugin/13690-circleci">here&lt;/a>.&lt;/p>
&lt;h3 id="shellcheck">ShellCheck&lt;/h3>
&lt;p>If you’re working with CircleCI, odds are you’re working with the shell to do some hacky whacky skkkriptin&amp;rsquo;. And to make the process a tad less of a &lt;em>spray n&amp;rsquo; pray&lt;/em>, &lt;code>shellcheck&lt;/code> will static-check your script, give you advice that you really should listen to, and even give you suggestions. It’s like asking grandpa to validate your scripts! You can use it online or install it &lt;a href="https://www.shellcheck.net/" title="https://www.shellcheck.net/">here&lt;/a>, and if you’re using an Intellij-based editor/ IDE it’ll automatically be used by the bundled &lt;code>Shell Script&lt;/code> plugin.&lt;/p>
&lt;h3 id="shfmt">shfmt&lt;/h3>
&lt;p>This is not a bad word, it’s just a bad abbreviation. &lt;a href="https://github.com/mvdan/sh" title="https://github.com/mvdan/sh">shfmt&lt;/a> is a shell formatter. To make your shell scripts less ugly. &lt;a href="https://formulae.brew.sh/formula/shfmt" title="https://formulae.brew.sh/formula/shfmt">Install on Hombrew&lt;/a> &lt;em>(if you&amp;rsquo;re on linux you know where to get your stuff).&lt;/em>&lt;br>
Did I mention it’ll also be automatically picked and used by the bundled Shell Script plugin on Intellij-based editors/ IDEs? &lt;em>this generation has it easy&lt;/em>.&lt;/p>
&lt;hr>
&lt;h2 id="circle-tips">How to &lt;del>cope with depression&lt;/del> better approach CircleCI&lt;/h2>
&lt;p>Here I’ll cover some use cases that are known to be really counter-intuitive (to put it nicely) in CircleCI.&lt;/p>
&lt;h3 id="dynamic-parameters">Dynamic Parameters&lt;/h3>
&lt;p>You want to pass a piece of data from a step to another. How to do this in CircleCI?&lt;/p>
&lt;p>&lt;strong>The short version&lt;/strong>: You can’t.&lt;br>
&lt;strong>Why?&lt;/strong> You can’t pass inputs to &lt;code>steps&lt;/code>. You can pass them to a &lt;code>command&lt;/code> but even that won’t work for most cases (see below).&lt;/p>
&lt;p>&lt;strong>Workaround:&lt;/strong> Your only hope (I mean it, there’s only one practical way so don’t bother) is to store this little value in the Environment Variables and retrieve it later. For example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yml" data-lang="yml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">steps&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="w"> &lt;/span>&lt;span class="nt">run&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Post release to GitHub repo &lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">command&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">| &lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="l">set -e &lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="l">rel_id=$(./scripts/post-internal-release.sh) &lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="l">echo &amp;#34;export REL_ID=&amp;#39;$rel_id&amp;#39;&amp;#34; &amp;gt;&amp;gt; $BASH_ENV&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>We’ve stored the release id (&lt;code>rel_id&lt;/code>) in &lt;code>$BASH_ENV&lt;/code> and named it &lt;code>REL_ID&lt;/code>. To access it in another &lt;code>step&lt;/code>, or a &lt;code>command&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yml" data-lang="yml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">run&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Upload mapping files to github &lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">command&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">| &lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="l">./scripts/upload_mapping_to_github.sh ${REL_ID}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>And here we retrieve it using the funky dollar sign: &lt;code>${REL_ID}&lt;/code>.&lt;/p>
&lt;hr>
&lt;h3 id="dynamic-parameters-to-commands">Dynamic Parameters (to Commands)&lt;/h3>
&lt;p>You want to pass a piece of data to a CircleCI &lt;code>command&lt;/code>. The catch is that this parameter can be only determined in runtime (Say a script result or network response). How to do this in CircleCI?&lt;/p>
&lt;p>&lt;strong>The short version&lt;/strong>: You can’t.&lt;br>
&lt;strong>Why?&lt;/strong> Because since CircleCI v2.1 all parameters will be inflated at parse time and not in runtime. Which means that little script result of yours is now just a script. Which means you’ve passed a script invocation as CircleCI dumb parameter. I hope you’re proud of yourself now.&lt;/p>
&lt;p>&lt;strong>Workaround:&lt;/strong> One of the things CircleCI did so right was to allow passing &lt;code>steps&lt;/code> as parameters to a CircleCI &lt;code>command&lt;/code> (think higher-order functions). Using this, instead of passing the script (result) as a parameter, pass the &lt;code>step&lt;/code> that calls this script as a parameter and it automatically runs in the same context as the command. Which means you can access the created files and the &lt;code>env&lt;/code> of the job and the command.&lt;/p>
&lt;p>Here, an example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yml" data-lang="yml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">post-github-release&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">description&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Post a release to GitHub repo &lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">parameters&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">sdk-builder&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">type&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">steps &lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">default&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[]&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">is-pre-release&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">type&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">boolean &lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">default&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">false&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">company&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">type&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">string &lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">default&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">internal&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">steps&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="w"> &lt;/span>&lt;span class="nt">steps&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">&amp;lt;&amp;lt; parameters.sdk-builder &amp;gt;&amp;gt; &lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="w"> &lt;/span>&lt;span class="nt">run&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">./bla_bla_bla.sh&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>See that? &lt;code>sdk-builder&lt;/code> is a &lt;del>lambda&lt;/del> &lt;code>step&lt;/code> that gets dynamically invoked based on the caller of this &lt;code>command&lt;/code>. But the important thing is that &lt;code>bla_bla_bla.sh&lt;/code> runs in the same context as &lt;code>sdk-builder&lt;/code>; any file changes, &lt;code>env&lt;/code> changes are accessible by both.&lt;/p>
&lt;hr>
&lt;h3 id="env-var-in-shell">Using an Env. variable inside a shell script&lt;/h3>
&lt;p>&lt;strong>The short version&lt;/strong>: It’s completely fine, you just might be doing it wrong.&lt;/p>
&lt;p>&lt;strong>How?&lt;/strong> By using the same magical dollar sign &lt;code>$&lt;/code> to access anything shell-related, including the contents of the &lt;code>env&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="nv">PR_LINK&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nv">$CIRCLE_PULL_REQUEST&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>You see, CircleCI complies with the &lt;code>POSIX&lt;/code> standard. but the reason you can’t access the &lt;code>env&lt;/code> is not at all related to CircleCI. It’s because &lt;em>you sir invoke the script the wrong way.&lt;/em>&lt;/p>
&lt;p>This is how to properly invoke a shell script:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">./script_to_run.sh
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>And not:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">sudo sh script_to_run.sh
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The latter invokes your script in a new &lt;code>sh&lt;/code> env. that doesn&amp;rsquo;t have access to the parent env. by default.
In order to do this you have to do 2 things:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Add this line (&lt;em>shebang&lt;/em>) to the very top of your script: &lt;code>#!/bin/bash&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Update your script permission to be executable: &lt;code>sudo chmod +x your_script.sh&lt;/code>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h3 id="shell-executable-permission">Getting “permission denied” when running a script even though it is executable&lt;/h3>
&lt;p>When setting the permission of a script make sure to do this (specifically if it’s an already existing script):&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">sudo chmod +x your_script.sh
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git update-index --chmod&lt;span class="o">=&lt;/span>+x your_script.sh
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>When you push, the second line makes sure the script in your remote repo. is also executable.&lt;/p>
&lt;hr>
&lt;h2 id="shell-tips-and-tricks">Shell tips and tricks&lt;/h2>
&lt;h3 id="json-jq">Json comes into your shell house, how do you say hi?&lt;/h3>
&lt;p>I know you’ve a couple of &lt;code>grep&lt;/code>s and &lt;code>tr&lt;/code>s ready for dealing with people like Json, but let me tell you how to do it &lt;em>&lt;strong>for good&lt;/strong>&lt;/em>: Use &lt;a href="https://stedolan.github.io/jq/" title="https://stedolan.github.io/jq/">jq&lt;/a>. It’s tiny, effective, and has all the required syntax to wrangle the living bits out of this so-called json man. You can toy with it &lt;a href="https://jqplay.org/" title="https://jqplay.org/">online&lt;/a> till you find the perfect filter and apply it just like with Instagram. For example, this is how I filter 7k+ entries in a json array to find a certain object:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="nv">job&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="k">$(&lt;/span>jq &lt;span class="s1">&amp;#39;.items[] | select(.name == &amp;#34;job-requires-approval&amp;#34;)&amp;#39;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&amp;lt;&lt;/span> &lt;span class="s2">&amp;#34;{items: [...]}&amp;#34;&lt;/span>&lt;span class="k">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">approver_id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="k">$(&lt;/span>jq &lt;span class="s1">&amp;#39;.approved_by&amp;#39;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&amp;lt;&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$job&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="k">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="math-bc">How to do math&lt;/h3>
&lt;p>Turns out math isn’t easy after all. At least for the shell. in order to do proper arithmetic ops in the shell you have to use a custom &lt;code>GNU&lt;/code> language for it: &lt;a href="https://en.wikipedia.org/wiki/Bc_(programming_language)" title="https://en.wikipedia.org/wiki/Bc_(programming_language)">bc (basic calculator)&lt;/a>. In CircleCI, there’s a high chance that you’re running on a &lt;code>debian-based&lt;/code> machine. So installing &lt;code>bc&lt;/code> is as easy as:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">sudo apt install bc
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>To use it, you can think of it as a simple C-like language:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="nv">two&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="k">$(&lt;/span>&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;1 + 1&amp;#34;&lt;/span> &lt;span class="p">|&lt;/span> bc&lt;span class="k">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>If you’re dealing with floating-point numbers add the &lt;code>-l&lt;/code> flag:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="nv">variance&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="k">$(&lt;/span>&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$delta&lt;/span>&lt;span class="s2"> - &lt;/span>&lt;span class="nv">$tolerable&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">|&lt;/span>bc -l&lt;span class="k">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>To round a number, divide by &lt;code>1&lt;/code> (bear with me):&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;1.7/1&amp;#34;&lt;/span> &lt;span class="p">|&lt;/span> bc &lt;span class="c1"># prints 1&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="fail-early">Fail-early&lt;/h3>
&lt;p>A wise man once said&lt;/p>
&lt;blockquote>
&lt;p>It’s better to know that you’re failing than knowing that you’ve already failed.&lt;/p>
&lt;/blockquote>
&lt;p>Let’s pretend that actually happened and put it into context: You have a &lt;code>run step&lt;/code> or a script that runs multiple commands. Now when one of these commands fail, it doesn’t mean the script or the step will stop running the rest (by default). And this is bad.&lt;/p>
&lt;p>To change this in a script you add this before your commands:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">set&lt;/span> -e &lt;span class="c1"># this bad boy &lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;bla bla bla&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># some failing commands here.... &lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;pffft&amp;#34;&lt;/span> &lt;span class="c1"># this won&amp;#39;t be printed if a command fails before this line&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>To change this in a &lt;code>run step&lt;/code> is not so different:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yml" data-lang="yml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">run&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Post release to GitHub repo &lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">command&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">| &lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="l">set -e&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># that&amp;#39;s our boy&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="l">rel_id=$(./scripts/post-internal-release.sh)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="l">echo &amp;#34;export REL_ID=&amp;#39;$rel_id&amp;#39;&amp;#34; &amp;gt;&amp;gt; $BASH_ENV&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="network-request-fail">Network request failure&lt;/h3>
&lt;p>Say you’re &lt;code>curl&lt;/code>ing some endpoint and you want to fail the script/ &lt;code>job&lt;/code> when the response code is not a major success. You can check if it’s &lt;code>&amp;gt; 200&lt;/code> and &lt;code>&amp;lt; 300&lt;/code> or all sorts of tricks but there’s actually a native way to do it with &lt;code>curl&lt;/code>: The fail flag &lt;code>-f&lt;/code> this bad boy will fail the with an exit code that is guaranteed &lt;code>&amp;gt; 0&lt;/code> when your response code is not a success:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">curl -f -X GET &lt;span class="s2">&amp;#34;https://circleci.com/api/v2/workflow/&lt;/span>&lt;span class="nv">$WORKFLOW_ID&lt;/span>&lt;span class="s2">/job&amp;#34;&lt;/span> -u &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$CIRCLE_TOKEN&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>:
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Combine this with the former tip and you have fail-early combination that’ll make sure you never fail twice &lt;em>(at least in the same context)&lt;/em>.&lt;/p>
&lt;hr>
&lt;h3 id="curl-silence">cURLy output? Use this formula&lt;/h3>
&lt;p>You have a script that does something and returns a value when it finishes:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">curl -f -X GET &lt;span class="s2">&amp;#34;https://circleci.com/api/v2/workflow/&lt;/span>&lt;span class="nv">$WORKFLOW_ID&lt;/span>&lt;span class="s2">/job&amp;#34;&lt;/span> -u &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$CIRCLE_TOKEN&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;result&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The problem here is that curl prints stuff too. so &lt;code>&amp;quot;result&amp;quot;&lt;/code> won’t be the only output of your script. Luckily, you can tell &lt;code>curl&lt;/code> to shut up (in a nice way) by using the &lt;code>-s&lt;/code> flag:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">curl -s -f -X GET &lt;span class="s2">&amp;#34;https://circleci.com/api/v2/workflow/&lt;/span>&lt;span class="nv">$WORKFLOW_ID&lt;/span>&lt;span class="s2">/job&amp;#34;&lt;/span> -u &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$CIRCLE_TOKEN&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;result&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;p>Have a comment? Please post it right below.&lt;/p></description></item><item><title>Painting with Poetry</title><link>https://blog.mhashim6.me/painting-with-poetry/</link><pubDate>Sat, 20 Aug 2022 00:00:00 +0000</pubDate><guid>https://blog.mhashim6.me/painting-with-poetry/</guid><description>&lt;h2 id="what-brings-me-here">What brings me here&lt;/h2>
&lt;p>The following (Seven) paintings are hand-picked from ~Fifty-plus generated images (in ten days) using Tolkien&amp;rsquo;s Poems almost word-for-word.&lt;br>
Tolkien is a master of detail and vast imagination. I&amp;rsquo;ve always been fond of his world and the vivid imagery he projects with his words.&lt;br>
His poetry is the perfect complement to his imagination. So I thought I might get tiny glimpses of his world using modern ML image-gen engines. And I was really blessed with the results.&lt;/p>
&lt;h3 id="the-song-of-eärendil">The Song of Eärendil&lt;/h3>
&lt;p>&lt;img src="https://blog.mhashim6.me/images/imagined/mhashim6_earendil.png" alt="by mhashim6" title="by mhashim6">&lt;/p>
&lt;blockquote>
&lt;p>From World&amp;rsquo;s End there he turned away,&lt;br>
and yearned again to find afar&lt;br>
his home through shadows journeying,&lt;br>
and burning as an island star&lt;br>
on high above the mists he came,&lt;br>
a distant flame before the Sun,&lt;br>
a wonder ere the waking dawn&lt;br>
where grey the Norland waters run.&lt;/p>
&lt;/blockquote>
&lt;hr>
&lt;h3 id="kortirion-among-the-trees">Kortirion among the Trees&lt;/h3>
&lt;p>Here I had a happy accident, I used a short part from the poem stripping it off its context to generate an image. The result was very beautiful indeed. But &amp;ldquo;beautiful&amp;rdquo; was the opposite of what this tragic poem is about.&lt;/p>
&lt;p>&lt;img src="https://blog.mhashim6.me/images/imagined/mhashim6_kor_2.png" alt="by mhashim6" title="by mhashim6">&lt;/p>
&lt;blockquote>
&lt;p>While through the storeyed elms&lt;br>
The gliding water leaves these inland realms,&lt;br>
And slips between long meadows to the Sea —&lt;br>
Still bearing downward over murmurous falls&lt;/p>
&lt;/blockquote>
&lt;p>However, when I used it in its original context the result was on the literal end of the spectrum.&lt;/p>
&lt;p>&lt;img src="https://blog.mhashim6.me/images/imagined/mhashim6_kor_1.png" alt="by mhashim6" title="by mhashim6">&lt;/p>
&lt;blockquote>
&lt;p>O fading town upon an island hill,&lt;br>
Old shadows linger in thine ancient gate,&lt;br>
Thy robe is grey, thine old heart now is still;&lt;br>
Thy towers silent in the mist await their crumbling end,&lt;/p>
&lt;p>While through the storeyed elms&lt;br>
The gliding water leaves these inland realms,&lt;br>
And slips between long meadows to the Sea —&lt;br>
Still bearing downward over murmurous falls&lt;br>
One day and then another to the Sea;&lt;br>
And slowly thither many years have gone,&lt;br>
Since first the Elves here built &lt;strong>Kortirion&lt;/strong>.&lt;/p>
&lt;/blockquote>
&lt;hr>
&lt;h3 id="habbanan-beneath-the-stars">Habbanan beneath the Stars&lt;/h3>
&lt;p>&lt;img src="https://blog.mhashim6.me/images/imagined/mhashim6_habbanan.png" alt="by mhashim6" title="by mhashim6">&lt;/p>
&lt;blockquote>
&lt;p>A globe of dark glass faceted with light&lt;br>
wherein the splendid winds have dusky flight;&lt;br>
untrodden spaces of an odorous plain&lt;br>
that watches for the moon that long has lain&lt;br>
and caught the meteors&amp;rsquo; fiery rain —&lt;br>
such there is night.&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://blog.mhashim6.me/images/imagined/mhashim6_such-there-is-night.png" alt="by mhashim6" title="by mhashim6">&lt;/p>
&lt;blockquote>
&lt;p>Not night as ours, unhappy folk,&lt;br>
where nigh the Earth in hazy bars,&lt;br>
a mist about the springing of the stars,&lt;br>
there trails a thin and wandering smoke&lt;br>
obscuring with its veil half-seen&lt;br>
the great abysmal still Serene.&lt;/p>
&lt;/blockquote>
&lt;hr>
&lt;h3 id="the-song-of-ælfwine">The Song of Ælfwine&lt;/h3>
&lt;p>&lt;img src="https://blog.mhashim6.me/images/imagined/mhashim6_wandering-fire.png" alt="by mhashim6" title="by mhashim6">&lt;/p>
&lt;blockquote>
&lt;p>Uncounted leagues away it lies from here,&lt;br>
And foam there flowers upon the sea&lt;br>
By cliffs of crystal carven clear&lt;br>
On shining beaches blowing free.&lt;/p>
&lt;/blockquote>
&lt;hr>
&lt;h3 id="the-happy-mariners">The Happy Mariners&lt;/h3>
&lt;p>&lt;img src="https://blog.mhashim6.me/images/imagined/mhashim6_happy-mariners.png" alt="by mhashim6" title="by mhashim6">&lt;/p>
&lt;blockquote>
&lt;p>Here only comes at whiles a wind to blow&lt;br>
Returning darkly down the way ye go,&lt;br>
With perfume laden of unearthly trees.&lt;/p>
&lt;p>Here only long afar through window-pane&lt;br>
I glimpse the flicker of the golden rain&lt;br>
That falls for ever on the outer seas.&lt;/p>
&lt;/blockquote></description></item><item><title>Impact of my Open Source Projects</title><link>https://blog.mhashim6.me/impact-of-my-open-source-projects/</link><pubDate>Sat, 30 Jul 2022 00:00:00 +0000</pubDate><guid>https://blog.mhashim6.me/impact-of-my-open-source-projects/</guid><description>&lt;h1 id="hi-im-muhammad-hashim">Hi, I&amp;rsquo;m Muhammad Hashim!&lt;/h1>
&lt;p>But also in this particular context I&amp;rsquo;m known as &lt;a href="https://github.com/mhashim6">&lt;code>mhashim6&lt;/code>&lt;/a>. And this is a breakdown of some of my FOSS projects and how they&amp;rsquo;re used by the devs of the GitHub community.&lt;/p>
&lt;p>&lt;em>This data was obtained using &lt;a href="https://github.com/search?p=2&amp;amp;q=mhashim6.&amp;amp;type=Code">GitHub&amp;rsquo;s global code search utility&lt;/a>.&lt;/em>&lt;/p>
&lt;h2 id="alpha-101">&lt;a href="https://github.com/mhashim6/Open-Hadith-Data">Open Hadith Data&lt;/a>&lt;/h2>
&lt;p>When I first made this, there was no &lt;em>actual&lt;/em> open and free dataset for Hadith (الأحاديث النبوية). And this was the objective of this repo. And I later used it to build my very first public Android App–&lt;a href="https://play.google.com/store/apps/details?id=mhashim6.android.thetwoauthentics&amp;amp;hl=en">The Two Authentic books (الصحيحان: البخاري ومسلم)&lt;/a>&lt;/p>
&lt;h3 id="notable-projects-that-use-__open-hadith-data__">Notable Projects that use &lt;strong>Open Hadith Data&lt;/strong>&lt;/h3>
&lt;h4 id="ahadeethhttpsgithubcommuwaffaqimamahadeeth">&lt;a href="https://github.com/MuwaffaqImam/ahadeeth">Ahadeeth&lt;/a>&lt;/h4>
&lt;p>A cross-platform mobile and web app for Hadith&lt;/p>
&lt;h4 id="openhadithhttpsgithubcomtarekeldeebopenhadith">&lt;a href="https://github.com/tarekeldeeb/OpenHadith">OpenHadith&lt;/a>&lt;/h4>
&lt;p>This python project provides various operations and insights on the hadith dataset&lt;/p>
&lt;h4 id="the9bookshttpsgithubcommghaniithe9books">&lt;a href="https://github.com/mghanii/The9Books">The9Books&lt;/a>&lt;/h4>
&lt;blockquote>
&lt;p>API to access Hadiths of Bukhari, Muslim, Abu-Dawud, Ahmed Ibn-Hanbal, Muwataa, Ibn-Maja, Al Tirmidhi, Al Nasai, Al Darimi&lt;/p>
&lt;/blockquote>
&lt;hr>
&lt;h2 id="pi4khttpsgithubcommhashim6pi4k">&lt;a href="https://github.com/mhashim6/Pi4K">Pi4K&lt;/a>&lt;/h2>
&lt;p>I developed &lt;code>Pi4K&lt;/code> as complement to the father lib of &lt;code>JVM&lt;/code> on the RaspberryPi—&lt;a href="https://www.pi4j.com">&lt;code>Pi4J&lt;/code>&lt;/a> &lt;br>
It&amp;rsquo;s a kotlin DSL that makes developing for &lt;em>RPIs&lt;/em> not just fun, but also simple and concise.&lt;/p>
&lt;h3 id="notable-projects-that-use-__pi4k__">Notable Projects that use &lt;strong>Pi4K&lt;/strong>&lt;/h3>
&lt;h4 id="kotlinonpihttpsgithubcompete32kotlinonpi">&lt;a href="https://github.com/pete32/KotlinOnPi">KotlinOnPi&lt;/a>&lt;/h4>
&lt;p>Which is a companion repository for this &lt;a href="https://pete32.medium.com/kotlin-or-java-on-a-raspberry-pi-de092d318df9">great article&lt;/a> on how to start developing on the RaspberryPi from absolute zero using &lt;code>Kotlin/JVM&lt;/code>.&lt;/p>
&lt;h4 id="vr-carhttpsgithubcomlhwdevproject-vrcar">&lt;a href="https://github.com/lhwdev/project-vrcar">VR-CAR&lt;/a>&lt;/h4>
&lt;blockquote>
&lt;p>🚗 A project for school club; remoted car with Raspberry PI whose vision can be seen by VR (maybe stale; maybe hard).&lt;/p>
&lt;/blockquote>
&lt;p>I&amp;rsquo;m really glad my project helped these guys with their school project.&lt;/p>
&lt;h4 id="gate-projecthttpsgithubcomzelgius0880gateproject">&lt;a href="https://github.com/Zelgius0880/GateProject">Gate Project&lt;/a>&lt;/h4>
&lt;p>A cool project that used my work as starting point to build a smart IoT system&lt;/p>
&lt;hr>
&lt;h2 id="simple-adbhttpsgithubcommhashim6simple-adb--system-command-executorhttpsgithubcommhashim6commander">&lt;a href="https://github.com/mhashim6/Simple-ADB">Simple-ADB&lt;/a> &amp;amp; &lt;a href="https://github.com/mhashim6/Commander">System-Command-Executor&lt;/a>&lt;/h2>
&lt;p>&lt;code>Simple-ADB&lt;/code> was my first ever public app that I built with Java. The objective was simple: one Graphical &lt;code>ADB&lt;/code> Client to rule them all. And to my surprise, It actually became the #1 client till this very day. &lt;br>
&lt;code>System-Command-Executor&lt;/code> was the component that wrapped native system commands in my client, I later decided to make it an independent &lt;code>lib&lt;/code> to be re-used in other projects.&lt;/p>
&lt;h3 id="notable-projects-that-use-__simple-adb__--__system-command-executor__">Notable Projects that use &lt;strong>Simple-ADB&lt;/strong> &amp;amp; &lt;strong>System-Command-Executor&lt;/strong>&lt;/h3>
&lt;h4 id="auto-motionhttpsgithubcomteamxenoxauto-motion">&lt;a href="https://github.com/teamxenox/auto-motion">auto-motion&lt;/a>&lt;/h4>
&lt;blockquote>
&lt;p>A tool to edit your lengthy screen records, automatically.&lt;/p>
&lt;/blockquote>
&lt;h4 id="forget-windows-use-linuxhttpsgithubcomcarbon-fusionbuild_fwul">&lt;a href="https://github.com/Carbon-Fusion/build_fwul">Forget-Windows-Use-Linux&lt;/a>&lt;/h4>
&lt;blockquote>
&lt;p>FWUL - The most reliable adb/fastboot live system ever - to manage ANY Android without driver hassle&lt;/p>
&lt;/blockquote>
&lt;hr>
&lt;h2 id="intellij-drumrollhttpsgithubcommhashim6intellij-drumroll">&lt;a href="https://github.com/mhashim6/intellij-drumroll">intellij-drumroll&lt;/a>&lt;/h2>
&lt;blockquote>
&lt;p>An Intellij Platform Plugin that plays a drum roll sound on compile/build. and other equally-fun sounds when build has errors, or warnings.&lt;/p>
&lt;/blockquote>
&lt;h3 id="people-that-use-__intellij-drumroll__-or-are-inspired-by-it">People that use &lt;strong>intellij-drumroll&lt;/strong> or are inspired by it&lt;/h3>
&lt;h4 id="intellij-build-webhook-notifierhttpsgithubcomhbmartinintellij-build-webhook-notifier">&lt;a href="https://github.com/hbmartin/intellij-build-webhook-notifier">intellij-build-webhook-notifier&lt;/a>&lt;/h4>
&lt;blockquote>
&lt;p>Call a configurable webhook on build start, error, or success. Useful for sending push notifications, blinking lights, etc.&lt;/p>
&lt;/blockquote>
&lt;p>I was really glad to read this line by the author:&lt;/p>
&lt;blockquote>
&lt;p>Significant inspiration drawn from intellij-drumroll by mhashim6&lt;/p>
&lt;/blockquote>
&lt;h4 id="turns-out-there-are-plenty-of-people-who-used-__intellij-drumroll__-as-a-part-of-their-portable-development-starter-kit-i-picked">Turns out there are plenty of people who used &lt;strong>intellij-drumroll&lt;/strong> as a part of their portable development starter-kit. I picked:&lt;/h4>
&lt;ul>
&lt;li>&lt;a href="https://github.com/panfx/ideaSetting">&lt;code>panfx&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/Baneeishaque/gp-vnc-pcman-zsh-as-gh-chrome-idea-pycharm-conda3-hb-scrcpy-r-lfs-zilla-gram-matlab-mysql-phpstorm">&lt;code>Baneeishaque&lt;/code>&lt;/a>&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h1 id="honorable-mentions">Honorable Mentions&lt;/h1>
&lt;h2 id="removetashkeeljavahttpsgistgithubcommhashim67d96f7ea274c9eb7e509798a332d78ac">&lt;a href="https://gist.github.com/mhashim6/7d96f7ea274c9eb7e509798a332d78ac">RemoveTashkeel.java&lt;/a>&lt;/h2>
&lt;p>I wrote this &lt;code>gist&lt;/code> in 2017 to publicly document how to get rid of Arabic diacritics (تشكيل) using Java as an example. And it got listed in numerous &lt;em>Awesome-x&lt;/em>-like repos.&lt;/p>
&lt;h3 id="notable-projects-that-use-__removetashkeeljava__">Notable Projects that use &lt;strong>RemoveTashkeel.java&lt;/strong>&lt;/h3>
&lt;h4 id="quranyapphttpsgithubcommahmoudmabrokquranyapp">&lt;a href="https://github.com/MahmoudMabrok/QuranyApp">QuranyApp&lt;/a>&lt;/h4>
&lt;blockquote>
&lt;p>Open Source HolyQuran app that provide Read, Listen, Tafseer, Test all of them and app is very small size.&lt;/p>
&lt;/blockquote>
&lt;hr>
&lt;h2 id="lc3-virtual-machinehttpsgithubcommhashim6lc3-virtual-machine">&lt;a href="https://github.com/mhashim6/LC3-Virtual-Machine">LC3-Virtual-Machine&lt;/a>&lt;/h2>
&lt;blockquote>
&lt;p>LC-3 VM Python implementation [school project].&lt;/p>
&lt;/blockquote>
&lt;h3 id="projects-that-use-__lc3-virtual-machine__">Projects that use &lt;strong>LC3-Virtual-Machine&lt;/strong>&lt;/h3>
&lt;h4 id="cosc2804-apr22-assignment2httpsgithubcommchldanncosc2804-apr22-assignment2">&lt;a href="https://github.com/mchldann/cosc2804-apr22-assignment2">cosc2804-apr22-assignment2&lt;/a>&lt;/h4>
&lt;blockquote>
&lt;p>LC-3 Minecraft Virtual Machine&lt;/p>
&lt;/blockquote>
&lt;p>Yet another school project : )&lt;/p>
&lt;hr>
&lt;h2 id="android-separatorviewhttpsgithubcommhashim6android-separatorview">&lt;a href="https://github.com/mhashim6/Android-SeparatorView">Android-SeparatorView&lt;/a>&lt;/h2>
&lt;p>This &lt;code>lib&lt;/code> is as simple as its name, it&amp;rsquo;s just a simple UI component that separates views in Android. Because at the time of this &lt;code>lib&lt;/code>, this was kind of a hassle to do in Android. &lt;br>
I found it used in numerous &lt;em>sample&lt;/em> apps, demos, and illustrations. I picked &lt;a href="https://github.com/MeteorStart/MVVM-Demo">MVVM-Demo&lt;/a> Randomly.&lt;/p>
&lt;h1 id="how-do-i-feel-about-it">How do I feel about it&lt;/h1>
&lt;p>If you know anything about me, then you must know that I&amp;rsquo;m derived by a &lt;strong>certain purpose&lt;/strong>. And to see some of my works are used to serve this purpose is literally the best thing that could happen to me in my life. because this purpose is my life; without it I&amp;rsquo;m no more.&lt;/p></description></item><item><title>9 Rings for Amazon doomed to die</title><link>https://blog.mhashim6.me/rings-of-power/</link><pubDate>Mon, 25 Jul 2022 00:00:00 +0000</pubDate><guid>https://blog.mhashim6.me/rings-of-power/</guid><description>&lt;p>For years now Amazon have been working on &lt;em>&amp;ldquo;The biggest fantasy series in history&amp;rdquo;&lt;/em>. Yet every year, red flags kept on showing and it always seemed too good to be true. And now that the trailer is here, I can confirm: This show is awful.&lt;/p>
&lt;p>&lt;img src="https://github.com/mhashim6/blog/blob/main/static/images/9_rings/9r_yt_1.jpeg?raw=true" alt="Comments on the YouTube trailer" title="Comments on the YouTube trailer">&lt;/p>
&lt;p>I was really looking forward to this show, I&amp;rsquo;ve always been an avid reader of Tolkien&amp;rsquo;s every piece of literature. And the &lt;strong>&amp;ldquo;Rings of Power&amp;rdquo;&lt;/strong> is a rude insult to the world that Tolkien created.&lt;/p>
&lt;p>&lt;img src="https://github.com/mhashim6/blog/blob/main/static/images/9_rings/9r_yt_2.jpeg?raw=true" alt="Comments on the YouTube trailer" title="Comments on the YouTube trailer">&lt;/p>
&lt;h2 id="amazons-right-to-tolkiens-works">Amazon&amp;rsquo;s right to Tolkien&amp;rsquo;s works&lt;/h2>
&lt;p>Tolkien never wanter to sell the rights to his works to be featured in film or other media. But due to financial issues, the rights of the &amp;ldquo;&lt;strong>The Lord of The Rings&lt;/strong>&amp;rdquo; and &lt;strong>&amp;quot; The Hobbit&amp;quot;&lt;/strong> were sold to &lt;a href="https://www.middleearth.com">Middle-earth Enterprises&lt;/a> (Formerly known as Tolkien Enterprises) in the 70s. But other works were kept in-house with the family organization &lt;strong>&amp;ldquo;The Tolkien Estate&amp;rdquo;&lt;/strong>.&lt;/p>
&lt;p>&lt;img src="https://github.com/mhashim6/blog/blob/main/static/images/9_rings/9r_yt_3.jpeg?raw=true" alt="Comments on the YouTube trailer" title="Comments on the YouTube trailer">&lt;/p>
&lt;p>Now in order for Amazon to use any material from sources other than the &lt;em>LOTR&lt;/em> or the Hobbit books, it has to get The Estate&amp;rsquo;s approval. And due to the nature of Amazon&amp;rsquo;s (horrible) adaptation of the story, the Estate declined Amazon&amp;rsquo;s request to other materials such as &lt;strong>&amp;ldquo;The Silmarillion&amp;rdquo;&lt;/strong>.&lt;/p>
&lt;p>&lt;img src="https://github.com/mhashim6/blog/blob/main/static/images/9_rings/9r_yt_4.jpeg?raw=true" alt="Comments on the YouTube trailer" title="Comments on the YouTube trailer">&lt;/p>
&lt;h2 id="milking-it">Milking it&lt;/h2>
&lt;p>Amazon was left with the same material that was used in both the animated work in the 70s, and Peter Jackson&amp;rsquo;s films. And A LOT of (really bad) improvisation, and forced &lt;em>PC&lt;/em> statements that has absolutely no place in this beautiful fantasy and spread like the plague in everything there is.&lt;/p>
&lt;p>&lt;img src="https://github.com/mhashim6/blog/blob/main/static/images/9_rings/9r_yt_5.jpeg?raw=true" alt="Comments on the YouTube trailer" title="Comments on the YouTube trailer">&lt;/p>
&lt;h2 id="why-it-is-really-bad">Why it is really bad&lt;/h2>
&lt;p>By now, You must&amp;rsquo;ve seen how almost everyone is refusing this money hoarding so-called motion picture, but to do it justice, &lt;a href="https://www.reddit.com/user/IactaEstoAlea">u/lactaEstoAlea&lt;/a> did a thorough breakdown of why Tolkien readers are really upset about this on &lt;a href="https://www.reddit.com/r/OutOfTheLoop/comments/w6ip2c/comment/ihefmj4/?utm_source=share&amp;amp;utm_medium=ios_app&amp;amp;utm_name=iossmf&amp;amp;context=3">Reddit&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;ul>
&lt;li>Show creators claim to be improving on or correcting Tolkien&amp;rsquo;s work&lt;/li>
&lt;li>Outright anachronisms and breaks from the lore&lt;/li>
&lt;li>&amp;ldquo;The show is not based on but inspired by Tolkien&amp;rsquo;s work&amp;rdquo;&lt;/li>
&lt;li>Focus on show original characters, sidelining the major ones from the books&lt;/li>
&lt;li>A transparent emulation of the Game of Thrones format&lt;/li>
&lt;li>Massive compression of the events&amp;rsquo; timeline&lt;/li>
&lt;li>Focus on action and forcing it into the story where there was none&lt;/li>
&lt;li>Deviating from the established aesthetics of the universe&lt;/li>
&lt;li>Removing some of the unique aspects of the universe for convenience&amp;rsquo;s sake. In particular, the elven language&lt;/li>
&lt;li>Killing off/ignoring/removing/replacing major characters&lt;/li>
&lt;li>Poorly thought out marketing which fails to appeal to the existent fanbase&lt;/li>
&lt;li>The show looks inexcusably cheap considering the immense budget it has&lt;/li>
&lt;li>Comments from the creators that promise current day topics from the US will be addressed in the show&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Tolkien did once say:&lt;/p>
&lt;blockquote>
&lt;p>&lt;em>Evil is not capable of creating anything new, it can only distort and destroy what has been invented or made by the forces of good.&lt;/em>&lt;/p>
&lt;/blockquote></description></item><item><title>Sell yourself now, be freed (maybe) later</title><link>https://blog.mhashim6.me/bnpl/</link><pubDate>Fri, 27 May 2022 00:00:00 +0000</pubDate><guid>https://blog.mhashim6.me/bnpl/</guid><description>&lt;blockquote>
&lt;p>Such a smooth deceiver &lt;br>
Grinning as he leaves them &lt;br>
Empty handed and broken &lt;br>
Feeling like givers not victims &lt;br>
– Mike Semesky&lt;/p>
&lt;/blockquote>
&lt;p>Be me: I’ve just completed my Military Service, I had lots of plans, needs, and preparations for my new life. There was this one item that I needed, and much more wanted. And no, I couldn’t afford it.&lt;/p>
&lt;h2 id="the-scenery">The scenery&lt;/h2>
&lt;p>I hadn’t enough cash on me, and I wasn’t going to lose all my (puny) savings on it, and waiting is a pretty difficult option. What do I do? I see &lt;strong>“Buy now, pay later”&lt;/strong> services everywhere. It seemed like they’ve always been there, and I never preyed on it. I’ve always been a bit skeptic about it; &lt;strong>There was the issue with usury loans&lt;/strong> that drive the world’s finance. and there was another issue with me: safety.&lt;/p>
&lt;p>I studied the terms and all provided documents of a quite famous &lt;strong>BNPL&lt;/strong> service here in Egypt. And so far nothing seemed sketchy and that of course because I was only looking for what I wanted to see. I’ll spare you the financial details because this really isn’t the proper place for this.&lt;/p>
&lt;h2 id="the-problem">The Problem&lt;/h2>
&lt;p>I did the deed, I applied, and I &lt;em>“purchased”&lt;/em> the item, and the moment I was handed the &lt;em>“receipt”&lt;/em>. I felt a terrible feeling of regret. &lt;strong>I now walk out of the store with something that I don’t own or can’t even afford&lt;/strong>. It’s not right. I see the installment plan and all I could see is that I can’t claim this item mine till &lt;em>N&lt;/em> moons to come. &lt;strong>What if the unexpected happened&lt;/strong> and for some reason I couldn’t pay my dues on time? I’m on debt and for a reason that I admit is a first-world-problem. I didn’t borrow money to feed my starving family or something! I didn’t own that item, no. &lt;strong>I leased myself to use this item&lt;/strong>, hoping one day I’ll be set free and own that item.&lt;/p>
&lt;h2 id="lesson-learned">Lesson Learned&lt;/h2>
&lt;p>Never again shall I claim what I can’t afford, literally, and metaphorically.&lt;/p></description></item><item><title>Oneliness</title><link>https://blog.mhashim6.me/oneliness/</link><pubDate>Mon, 16 May 2022 00:00:00 +0000</pubDate><guid>https://blog.mhashim6.me/oneliness/</guid><description>&lt;p>The word &lt;em>&amp;ldquo;Loneliness&amp;rdquo;&lt;/em> hasn&amp;rsquo;t always been present in the English language. In fact, it is relatively new. &amp;ldquo;Oneliness&amp;rdquo; on the other hand had always been there, meaning one&amp;rsquo;s being alone. It&amp;rsquo;s considered obsolete now in modern English. But it could be a perfect description of the state of many; There&amp;rsquo;s a case for people who are lonely, yet not alone. And the exact opposite.&lt;/p>
&lt;p>Many are familiar with that feeling, summarized as just not being surrounded by the &lt;em>&amp;ldquo;right&amp;rdquo;&lt;/em> people–people who wouldn&amp;rsquo;t tolerate a talk of opening-up, or people that are not particularly interested, or people who are absolutely compassionate and supportive, but really have nothing to offer.&lt;/p>
&lt;p>Many throughout history have expressed this feeling, even before the &lt;del>&amp;ldquo;right&amp;rdquo;&lt;/del> words existed. And they put it like no one could ever do.
Though Tomas Turner was surrounded by friends. And yet, after the passing of his wife (whom he called his &lt;em>&amp;ldquo;only friend&amp;rdquo;&lt;/em>), he wrote in his diary, he felt &lt;em>&amp;ldquo;deserted&amp;rdquo;&lt;/em>&lt;/p>
&lt;blockquote>
&lt;p>&amp;ldquo;Not one, no! not one that attempts to pour that healing balm of compassion into a heart wounded and torn to pieces with trouble. Whenever it shall please the almighty to take from me the wife of my bosom, then shall I be like a beacon upon a rock, or an ensign on a hill, destitute of every sincere friend, and not a friendly companion left to comfort my afflicted mind and yield that pleasing comfort of consolation to a mind quite worn to the grave with trouble.&amp;rdquo;&lt;/p>
&lt;/blockquote>
&lt;p>The modernist English writer Virginia Woolf wrote of her own loneliness in 1928 in her diary&lt;/p>
&lt;blockquote>
&lt;p>&amp;ldquo;I have entered into a sanctuary… of great agony once; and always some terror: so afraid one is of loneliness: of seeing to the bottom of the vessel… and got then to a consciousness of what I call &amp;lsquo;reality&amp;rsquo;… something abstract, but residing in the downs or sky; beside which nothing matters.&amp;rdquo;&lt;/p>
&lt;/blockquote>
&lt;p>Plath struggled for a sense of belonging that was constantly just out of reach&lt;/p>
&lt;blockquote>
&lt;p>&amp;ldquo;God, but life is loneliness, despite all the opiates… despite the false grinning faces we all wear. And when at last you find someone to whom you can pour out your soul, you stop in shock at the words you utter – they are so rusty, so ugly, so meaningless and feeble from being kept in the small cramped dark inside you so long.&amp;rdquo;&lt;/p>
&lt;/blockquote>
&lt;p>If you have this one person that scares the loneliness out of you. Count this blessing.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>Resources &amp;amp; References&lt;/strong>: &lt;a href="https://www.historyextra.com/period/victorian/invention-loneliness-mental-health-lonely-history-modern-unhappy-self-isolation-alone/">The invention of loneliness: why being &amp;lsquo;unhappy alone&amp;rsquo; is a surprisingly modern idea&lt;/a>&lt;/p></description></item><item><title>The case for Holidays</title><link>https://blog.mhashim6.me/case-for-holidays/</link><pubDate>Sat, 07 May 2022 00:00:00 +0000</pubDate><guid>https://blog.mhashim6.me/case-for-holidays/</guid><description>&lt;p>Today is my last day on a week-long vacation. It&amp;rsquo;s a real blessing to have such relatively-long off-work time. And this very fact is a problem!&lt;/p>
&lt;p>&lt;strong>I remember&lt;/strong> 3-4 years ago I&amp;rsquo;d often feel sad at the weekend because now I&amp;rsquo;m forced to stop doing the activities I loved, be it college projects, gatherings and &lt;em>believe it or not&lt;/em> work. &lt;strong>I remember&lt;/strong> me doing side-projects on weekends as if I was just playing a video game; I&amp;rsquo;d never notice the passing of time, nor the effort I spent on these projects.&lt;/p>
&lt;p>&lt;strong>I remember&lt;/strong> years ago when I&amp;rsquo;d even work on weekends just because that freelance gig is so interesting I actually love every second of working on it. Or I&amp;rsquo;m really enjoying the company of my work mates to the extent I spend the weekend with them. Much like a father movie character waiting for the weekends to finish that shelf. But now? It&amp;rsquo;s &lt;em>unfortunately&lt;/em> completely different.&lt;/p>
&lt;p>In my life I noticed there are two reasons to take a break (besides emergencies and what not):&lt;/p>
&lt;ul>
&lt;li>Pause, Have fun, Recharge, Reflect, etc&amp;hellip;&lt;/li>
&lt;li>RUN!&lt;/li>
&lt;/ul>
&lt;p>The first one is sweet and understandable. Even if we had nothing to do for months we&amp;rsquo;d still get that urge of spending time breaking the routine (no matter how lazy it is). Much different from the other one, where I feel completely broken, worn out like a fainting kindle and I just can&amp;rsquo;t take it (sometimes physically) for even one more minute.&lt;/p>
&lt;p>Now this is really bad, this means I&amp;rsquo;m &lt;em>&lt;del>willingly?&lt;/del> forced&lt;/em> to do something that I dread, and hanging in there till I can no longer do it. I&amp;rsquo;m sinking my head in the tub for seconds before I automatically pull out my head so as not to drown&amp;hellip;and die.&lt;/p>
&lt;p>This will not end with the secret elixir I&amp;rsquo;m afraid. And so are most of my writings. But I&amp;rsquo;ll end this praying I&amp;rsquo;m once again working while being not&amp;hellip;sad, taking vacations only to pause, have fun, recharge, and reflect.&lt;/p></description></item><item><title>Bereft</title><link>https://blog.mhashim6.me/sharing-my-sorrow/</link><pubDate>Tue, 03 May 2022 00:00:00 +0000</pubDate><guid>https://blog.mhashim6.me/sharing-my-sorrow/</guid><description>&lt;p>Why would people share how they feel with the entire world? Is it normal to hang a sign on a central wall saying that &lt;em>Mr.Doe&lt;/em> is not happy? It’s quite normal when it comes to family and closed ones. But the entire world?&lt;/p>
&lt;p>Now indeed it’s encouraged to share one’s feelings and opinions for everyone to see and discuss. It’s perceived as normal by many. Some say it’s therapeutic. Some accept and welcome the new change and adopt it, following the spirit of trying new things. I can understand this. I’m quite bored myself. But I won’t deny I get this urge to share how sad I am from time to time. I never do it, and I keep thinking why do I &lt;del>need&lt;/del> want to do it in the first place!&lt;/p>
&lt;p>I also noticed that it’s not about sharing how I feel in general; this kind of attention doesn’t thrill me, nor is sought for any reason at all. But when it comes to sorrow, I get this urge. When I’m that sad I tend to stay by myself. And this is hard to maintain when everyone assumes that I’m perfectly fine. Maybe I want to share it so that people leave me be. Maybe it &lt;em>does&lt;/em> relieve some pain when I talk about it however slight.&lt;/p>
&lt;p>This is a blog after all, so maybe I could be more personal and share how I feel. I don’t know if this will &lt;em>help&lt;/em> at all. Or if it is even supposed to help in the first place. But here it is: I’m sad, too sad actually it’s getting to my physical health.&lt;/p>
&lt;p>I’ve always found &lt;em>Tolkien’s&lt;/em> description of &lt;em>Elves&lt;/em> very clever and somewhat relatable to real world’s humans; &lt;em>Elves&lt;/em> are immortal, yet they can get killed, or die of grief and sorrow.&lt;/p></description></item><item><title>Why?</title><link>https://blog.mhashim6.me/about/</link><pubDate>Sat, 30 Apr 2022 11:11:11 +0100</pubDate><guid>https://blog.mhashim6.me/about/</guid><description>&lt;blockquote>
&lt;p>&lt;strong>Why did I make this?&lt;/strong>&lt;br>
This place hosts writings that are not bound to a specific time, nor a region. It hosts my notions, thoughts, and recordings of &lt;del>my&lt;/del> life and labour.&lt;/p>
&lt;/blockquote></description></item><item><title>Gossips: An Event-Bus in a Chatty Neighborhood</title><link>https://blog.mhashim6.me/metaphorical-programming-gossips-event-bus/</link><pubDate>Fri, 19 Jun 2020 11:11:11 +0100</pubDate><guid>https://blog.mhashim6.me/metaphorical-programming-gossips-event-bus/</guid><description>&lt;p>In this post we&amp;rsquo;ll tackle a common issue: &lt;em>simple&lt;/em> communication between system components. With a slightly controversial, themed, domain-driven design.&lt;/p>
&lt;p>Though this post has nothing to do with Android, We need a context where an Event-Bus is needed. And boy oh boy is it needed in Android! And we’ll use this as an excuse to write an Event-Bus.&lt;/p>
&lt;p>I chose an analogy for the entire thing: &lt;strong>Gossips&lt;/strong>;&lt;br>
It fits with the nature of the library, and the way it&amp;rsquo;ll be used–A global pub-sub component to enable cross-component communication.&lt;/p>
&lt;h2 id="just-why">Just Why?&lt;/h2>
&lt;blockquote>
&lt;p>The intention of this &amp;ldquo;experiment&amp;rdquo; is to explore how expressive programming languages can be. And how close can we model our real world using logical statements and constructs. It really is amusing how software engineers have created such expressive constructs that we use in our code. This experiment is heavily triggered and inspired by &lt;a href="https://medium.com/@juliemmasam/javafx-and-the-theatre-metaphor-179243704581">JavaFX&amp;rsquo;s Theater analogy&lt;/a>.&lt;/p>
&lt;/blockquote>
&lt;h2 id="show-me-the-code">Show me the code&lt;/h2>
&lt;p>The spine of almost every event bus out there is a form of the &lt;a href="https://en.wikipedia.org/wiki/Observer_pattern">Observer Pattern&lt;/a>. And we won&amp;rsquo;t be any different. First, We&amp;rsquo;ll have to make our &lt;code>Observable&lt;/code> or the &lt;code>Publisher&lt;/code> as it&amp;rsquo;s called in a slightly &lt;a href="https://medium.com/better-programming/observer-vs-pub-sub-pattern-50d3b27f838c">different context&lt;/a>. Our &lt;code>Observable&lt;/code> is a source of &lt;strong>gossips&lt;/strong>, in a chatty neighborhood. Where rumors and gossips are the main source of entertainment:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="line">&lt;span class="cl">&lt;span class="k">interface&lt;/span> &lt;span class="nc">Gossips&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">fun&lt;/span> &lt;span class="nf">spread&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">gossip&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">fun&lt;/span> &lt;span class="nf">listen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">onNext&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">gossip&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">Unit&lt;/span>&lt;span class="p">):&lt;/span> &lt;span class="n">Subscription&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">fun&lt;/span> &lt;span class="nf">unSubscribe&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">subscription&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Subscription&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">fun&lt;/span> &lt;span class="nf">unSubscribeAll&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>Here we define our interface for the source of gossips. Like any respected event bus, Gossips should be able to &lt;code>publish&lt;/code>/&lt;strong>&lt;code>spread()&lt;/code>&lt;/strong> &lt;code>events&lt;/code>/&lt;strong>&lt;code>gossips&lt;/code>&lt;/strong>. We also want users to be able to &lt;code>subscribe&lt;/code>/&lt;strong>&lt;code>listen()&lt;/code>&lt;/strong> to &lt;code>events&lt;/code>/&lt;strong>&lt;code>gossips&lt;/code>&lt;/strong> the moment they come out, so that they can react accordingly. For the convenience of our users, we want them to be able to unsubscribe from these types of gossips.&lt;/p>
&lt;/blockquote>
&lt;p>Next, we want to implement the mechanism by which users can interact with our source of gossip. We need to create the &lt;code>Subscription&lt;/code> and the &lt;code>Receiver&lt;/code> components:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="line">&lt;span class="cl">&lt;span class="k">interface&lt;/span> &lt;span class="nc">Subscription&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">fun&lt;/span> &lt;span class="nf">cancel&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">val&lt;/span> &lt;span class="py">isCanceled&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Boolean&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>Here we provide our &lt;code>subscriber&lt;/code>s/&lt;strong>&lt;code>listener&lt;/code>s&lt;/strong> with a way to cancel their subscriptions.&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="line">&lt;span class="cl">&lt;span class="k">interface&lt;/span> &lt;span class="nc">Receiver&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="k">in&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">fun&lt;/span> &lt;span class="nf">psst&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">gossip&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>And here, we provide our nosy neighbors with a way to stay up to date with the latest screw-ups in the neighborhood. By the social act of whispering and an eloquent &lt;code>psst()&lt;/code> function.&lt;/p>
&lt;/blockquote>
&lt;p>Often the two are combined, and we will do just that. Whether it&amp;rsquo;s a good combination of qualities or not isn&amp;rsquo;t relevant to the topic of this article.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="line">&lt;span class="cl">&lt;span class="k">internal&lt;/span> &lt;span class="k">class&lt;/span> &lt;span class="nc">Neighbor&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="k">in&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="p">&amp;gt;(&lt;/span>&lt;span class="k">private&lt;/span> &lt;span class="k">val&lt;/span> &lt;span class="py">source&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Gossips&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="p">&amp;gt;,&lt;/span> &lt;span class="k">private&lt;/span> &lt;span class="k">val&lt;/span> &lt;span class="py">react&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">gossip&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">Unit&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">Subscription&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Receiver&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">override&lt;/span> &lt;span class="k">var&lt;/span> &lt;span class="py">isCanceled&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Boolean&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="k">false&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">override&lt;/span> &lt;span class="k">fun&lt;/span> &lt;span class="nf">psst&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">gossip&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">react&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">gossip&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">override&lt;/span> &lt;span class="k">fun&lt;/span> &lt;span class="nf">cancel&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">source&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">unSubscribe&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">isCanceled&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="k">true&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>Our &lt;code>Neighbor&lt;/code>s thrive on a &lt;code>source&lt;/code> of gossips. They also have their own way/function of &lt;code>react&lt;/code>ing to them. Since a &lt;code>Neighbor&lt;/code> is both a &lt;code>Receiver&lt;/code> and a &lt;code>Subscription&lt;/code> to our gossips, it implements their qualities: &lt;code>psst()&lt;/code>, and &lt;code>cancel()&lt;/code>.&lt;/p>
&lt;/blockquote>
&lt;p>Now what&amp;rsquo;s left is to define how our bus actually works, by writing an implementation of our &lt;code>Gossips&lt;/code> interface:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="line">&lt;span class="cl">&lt;span class="k">internal&lt;/span> &lt;span class="k">class&lt;/span> &lt;span class="nc">GossipsImpl&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">Gossips&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">private&lt;/span> &lt;span class="k">val&lt;/span> &lt;span class="py">neighbors&lt;/span> &lt;span class="k">by&lt;/span> &lt;span class="n">lazy&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">mutableSetOf&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">Neighbor&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="p">&amp;gt;&amp;gt;()&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">override&lt;/span> &lt;span class="k">fun&lt;/span> &lt;span class="nf">spread&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">gossip&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">neighbors&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">forEach&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">neighbor&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">neighbor&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">psst&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">gossip&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">override&lt;/span> &lt;span class="k">fun&lt;/span> &lt;span class="nf">listen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">onNext&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">gossip&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">Unit&lt;/span>&lt;span class="p">):&lt;/span> &lt;span class="n">Subscription&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">val&lt;/span> &lt;span class="py">neighbor&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">Neighbor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">source&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">react&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">onNext&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">neighbors&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">neighbor&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">neighbor&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">override&lt;/span> &lt;span class="k">fun&lt;/span> &lt;span class="nf">unSubscribe&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">subscription&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Subscription&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">neighbors&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">remove&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">subscription&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">override&lt;/span> &lt;span class="k">fun&lt;/span> &lt;span class="nf">unSubscribeAll&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">neighbors&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">forEach&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="k">it&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">cancel&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">neighbors&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">clear&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>We store a set of &lt;code>Neighbor&lt;/code>s, and we keep them up to date whenever a new &lt;code>gossip&lt;/code> is out. We add new neighbors to this set whenever they are interested in &lt;code>listen&lt;/code>ing to our gossips. We also remove them whenever they feel they had enough and want to &lt;code>unsubscribe&lt;/code>.&lt;/p>
&lt;/blockquote>
&lt;h2 id="tying-it-all-together">Tying it all together&lt;/h2>
&lt;p>An example of how it looks like in action is quite amusing:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="line">&lt;span class="cl">&lt;span class="k">object&lt;/span> &lt;span class="nc">State&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">val&lt;/span> &lt;span class="py">resultGossips&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Gossips&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">GenericResult&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nc">Gossips&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">create&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>We define a State object, that lives the entirety of our app&amp;rsquo;s life-cycle. and houses all our gossips, so that we can easily spread and &lt;code>listen&lt;/code> to them (don&amp;rsquo;t judge):&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="line">&lt;span class="cl">&lt;span class="k">fun&lt;/span> &lt;span class="nf">onAttach&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">resultGossips&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">listen&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">showResults&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">it&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>We listen to our gossips of interest, in an entry point in our app&amp;rsquo;s life-cycle. Similarly, we can unsubscribe when we feel like it:&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="line">&lt;span class="cl">&lt;span class="k">fun&lt;/span> &lt;span class="nf">onDetach&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">super&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">onDetach&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">subscriptions&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">cancel&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>We can spread gossips when we need to communicate (or realistically when we&amp;rsquo;re bored):&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="line">&lt;span class="cl">&lt;span class="k">fun&lt;/span> &lt;span class="nf">onButtonClick&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">resultGossips&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">spread&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">GenericResult&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;something something&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>And we&amp;rsquo;re done! A full-fledged Event-Bus in a really tiny codebase. But we all know that we don&amp;rsquo;t really care about the event bus itself; tell me your thoughts about the metaphor! Are you at all interested in this? Does this trigger you? I&amp;rsquo;d love a discussion in this topic.&lt;/p></description></item><item><title>Creating a project amidst a world crisis</title><link>https://blog.mhashim6.me/pm-in-crisis/</link><pubDate>Wed, 20 May 2020 00:00:00 +0000</pubDate><guid>https://blog.mhashim6.me/pm-in-crisis/</guid><description>&lt;blockquote>
&lt;p>May, 20, 2020 &lt;br>
The past three months were a completely new experience to us; We (13 CSE undergrads) set out to build an Open online Quran reciting and teaching platform.&lt;/p>
&lt;/blockquote>
&lt;p>We didn’t know of the upcoming global circumstances when we planned the project. We haven’t seen each other (physically) in the project’s entire lifetime. &lt;strong>Due to social distancing&lt;/strong>. The project was initially &lt;strong>a school assignment&lt;/strong>. We were to simulate a database project, and the school set the deadline to be 2 months. Till our final exams original date. &lt;strong>But we wanted to build a real-world application&lt;/strong>.&lt;/p>
&lt;p>We planned to finish phase 1 of the project in 2 months, 8 sprints. But things would have been different if we had a fortune teller in the team. But they don’t actually exist. It’s no secret that we were under-prepared. Our first sprint was basically “studying”. We knew it isn’t enough. But it should give us a modest kick start. And it did.&lt;/p>
&lt;p>Besides my role as a team lead, I was the scrum master (and it was a new role for me). I had to take Coursera’s 5-Course Product Management Specialization to better understand the role. &lt;strong>But I consider this project the real course in product management&lt;/strong>.&lt;/p>
&lt;blockquote>
&lt;p>Morale was the toughest factor to keep &lt;em>&lt;strong>up&lt;/strong>&lt;/em>&lt;/p>
&lt;/blockquote>
&lt;p>Our team was completely new to the agile &lt;del>manifesto&lt;/del> process. We had to adapt and change some habits in these trying times. We experimented with different approaches in managing the project and adapting to the current horrible circumstances. Morale was the toughest factor to keep &lt;em>&lt;strong>up&lt;/strong>&lt;/em>; things seemed to only go worse. Besides our morale and psychological health, we also faced physical health issues in Ramadan. Coordination and communication grew even harder.&lt;/p>
&lt;p>Despite all these horrible facts, we didn’t (completely) fail; though we didn’t deliver phase 1 in time. We didn’t blow up what was completed, quality was always the priority. &lt;strong>Testing wasn’t optional&lt;/strong>. Every functionality is considered done after &lt;strong>code review and automated tests have been written and passed&lt;/strong>. Client interaction was maintained as much as we could.&lt;/p>
&lt;p>Though we are in our final sprint, and though we failed from the project’s point of view, but we gained a lot of knowledge. And now that we have this experience. We will resume working on the project after taking what we&amp;rsquo;ve learned, and what went wrong into consideration; after making the necessary changes.&lt;/p>
&lt;p>&lt;img src="https://blog.mhashim6.me/images/sprints.png" alt="Six of our weekly-sprints. Progress bars tell a story of sorts" title="Six of our weekly-sprints. Progress bars tell a story of sorts">&lt;/p>
&lt;h4 id="key-points-that-weve-learned">Key points that we&amp;rsquo;ve learned&lt;/h4>
&lt;ul>
&lt;li>Naïve, premature estimates and preparations only lead to the slow, painful death of the project&lt;/li>
&lt;li>Requirements quality isn&amp;rsquo;t negotiable&lt;/li>
&lt;li>Increasing the team count &lt;code>/=&lt;/code> increasing the velocity and the performance. It can so easily become an obstacle&lt;/li>
&lt;li>Team Morale is the &amp;ldquo;Mana&amp;rdquo; as gamers call it; without &amp;ldquo;Mana&amp;rdquo; you can only go so far&lt;/li>
&lt;li>The team should always experiment practices to further enhance their productivity and performance, and to see what suits their needs the most&lt;/li>
&lt;li>All team members should always seek to be on the same page; they should have relatively equal knowledge of the project requirements and scope. I couldn&amp;rsquo;t stress this enough&lt;/li>
&lt;li>Team rotation and flexibility is a strong weapon; if handled with care, great things will happen to the project&lt;/li>
&lt;/ul>
&lt;p>What would you change if you were in our team? What do you think about the project and the circumstances? Please share your opinions with us!&lt;/p>
&lt;h4 id="notes">Notes&lt;/h4>
&lt;p>Our stack is: &lt;code>PostgreSQL&lt;/code>, &lt;code>Flask&lt;/code>, and &lt;code>ReactJS&lt;/code>. &lt;br>
Originally &lt;a href="https://www.linkedin.com/pulse/starting-project-amidst-world-crisis-muhammad-hashim/">published on LinkedIn&lt;/a>.&lt;/p></description></item></channel></rss>